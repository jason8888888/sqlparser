options{  IGNORE_CASE = true;  MULTI = true;  VISITOR = true;  STATIC = false;  UNICODE_INPUT = true;}PARSER_BEGIN(SelectParser)package selectParser.parser;import java.io.ByteArrayInputStream;import java.util.HashMap;import java.util.Map;/**
 * The parser generated by JavaCC
 */public class SelectParser{  public static void main(String args []) throws ParseException  {    SelectParser p = null;    System.out.println("Reading from buffer");    //String statement = "SELECT *,u.*,u.a,b,(select i from v where u=mytable.d) FROM mytable WHERE  u>2 LIMIT 3, ?";
    String statement = "SELECT distinct a FROM mytable1,mytable2 where a=b and x between 1 and 11 and (u=v or x=u)";    ByteArrayInputStream is = new ByteArrayInputStream(statement.getBytes());    p = new SelectParser(is);    SimpleNode t = p.Select();    System.out.println("Parse Successfull");    t.dump(">");  }}PARSER_END(SelectParser)SKIP :{  " "| "\t"| "\r"| "\n"}TOKEN : /* SQL Keywords. prefixed with K_ to avoid name clashes */{  < K_AS : "AS" >| < K_BY : "BY" >| < K_DO : "DO" >| < K_IS : "IS" >| < K_IN : "IN" >| < K_OR : "OR" >| < K_ON : "ON" >| < K_ALL : "ALL" >| < K_AND : "AND" >| < K_ANY : "ANY" >| < K_KEY : "KEY" >| < K_NOT : "NOT" >| < K_SET : "SET" >| < K_ASC : "ASC" >| < K_TOP : "TOP" >| < K_END : "END" >| < K_DESC : "DESC" >| < K_INTO : "INTO" >| < K_NULL : "NULL" >| < K_LIKE : "LIKE" >| < K_DROP : "DROP" >| < K_JOIN : "JOIN" >| < K_LEFT : "LEFT" >| < K_FROM : "FROM" >| < K_OPEN : "OPEN" >| < K_CASE : "CASE" >| < K_WHEN : "WHEN" >| < K_THEN : "THEN" >| < K_ELSE : "ELSE" >| < K_SOME : "SOME" >| < K_TABLE : "TABLE" >| < K_WHERE : "WHERE" >| < K_USING : "USING" >| < K_UNION : "UNION" >| < K_GROUP : "GROUP" >| < K_BEGIN : "BEGIN" >| < K_INDEX : "INDEX" >| < K_INNER : "INNER" >| < K_LIMIT : "LIMIT" >| < K_OUTER : "OUTER" >| < K_ORDER : "ORDER" >| < K_DELETE : "DELETE" >| < K_CREATE : "CREATE" >| < K_SELECT : "SELECT" >| < K_OFFSET : "OFFSET" >| < K_EXISTS : "EXISTS" >| < K_HAVING : "HAVING" >| < K_INSERT : "INSERT" >| < K_UPDATE : "UPDATE" >| < K_VALUES : "VALUES" >| < K_ESCAPE : "ESCAPE" >| < K_PRIMARY : "PRIMARY" >| < K_NATURAL : "NATURAL" >| < K_REPLACE : "REPLACE" >| < K_BETWEEN : "BETWEEN" >| < K_TRUNCATE : "TRUNCATE" >| < K_DISTINCT : "DISTINCT" >| < K_INTERSECT : "INTERSECT" >}TOKEN : /* Numeric Constants */{  < S_DOUBLE :    (      (< S_INTEGER >)? "." < S_INTEGER >      (        [ "e", "E" ] ([ "-", "+" ])? < S_INTEGER >      )?    | (< S_INTEGER >)+ (".")? [ "e", "E" ] ([ "-", "+" ])? (< S_INTEGER >)+    ) >| < S_INTEGER : (< DIGIT >)+ >| < #DIGIT : [ "0"-"9" ] >}SPECIAL_TOKEN :{  < LINE_COMMENT : "--" (~[ "\r", "\n" ])* >| < MULTI_LINE_COMMENT :    "/*" (~[ "*" ])* "*"    (      "*"    |      (        ~[ "*", "/" ] (~[ "*" ])* "*"      )    )*    "/" >}TOKEN :{  < S_IDENTIFIER :    (< LETTER >)+    (      < DIGIT >    | < LETTER >    | < SPECIAL_CHARS >    )* >| < #LETTER : [ "a"-"z", "A"-"Z" ] >| < #SPECIAL_CHARS :    "$"  | "_" >| < S_CHAR_LITERAL :    "'" (~[ "'" ])* "'"    (      "'" (~[ "'" ])* "'"    )* >| < S_QUOTED_IDENTIFIER : "\"" (~[ "\n", "\r", "\"" ])* "\"" >}void Column() :{  String name1 = null;  String name2 = null;  String name3 = null;  boolean isExternalLink = false;}{  // [schema.][tabella.]colonna
  name1 = RelObjectName()  [    "." name2 = RelObjectName() [ "." name3 = RelObjectName() ]  ]  [    "(" "+" ")"    {      isExternalLink = true;    }  ]  {    String colName = null;    String table = null;    String schema = null;    if (name3 != null)    {      schema = name1;      table = name2;      colName = name3;    }    else if (name2 != null)    {      table = name1;      colName = name2;    }    else    {      colName = name1;    }    jjtThis.setSchema(schema);    jjtThis.setTable(table);    jjtThis.setColumn(colName);  }}String RelObjectName() #void :{  Token tk = null;}{  (    tk = < S_IDENTIFIER >  | tk = < S_QUOTED_IDENTIFIER >  )  {    return tk.image;  }}void TableWithAlias() :{}{  Table() [ Alias() ]}void Table() :{  String name1 = null;  String name2 = null;}{  (    LOOKAHEAD(3)    name1 = RelObjectName() "." name2 = RelObjectName()    {      jjtThis.setSchema(name1);      jjtThis.setTable(name2);    }  | name1 = RelObjectName()    {      jjtThis.setTable(name1);    }  )}ASTSelect Select() :{}{  SelectBody()  {    return jjtThis;  }}void SelectBody() #void :{}{  (    LOOKAHEAD(Union())    Union()  | PlainSelect()  )}void Union() :{  boolean isAll = false;}{  (    "(" PlainSelect() ")" < K_UNION >    [      < K_ALL >      {        isAll = true;      }    ]    "(" PlainSelect() ")"    (      < K_UNION >      [        < K_ALL >        {          isAll = true; }      ]      "(" PlainSelect() ")"    )*    [ OrderByElements() ]  )|  (    PlainSelect() < K_UNION >    [      < K_ALL >      {        isAll = true;      }    ]    PlainSelect()    (      < K_UNION >      [        < K_ALL >        {          isAll = true; }      ]      PlainSelect()    )*  )  {    jjtThis.setAll(isAll);  }}void PlainSelect() :{}{  < K_SELECT >  [    < K_ALL >  |    (      < K_DISTINCT > [ "ON" "(" SelectItemsList() ")" ]    ) #Distinct  ]  [ Top() ] SelectItemsList() FromItemsList() [ WhereClause() ] [ GroupByColumnReferences() ] [ Having() ] [ OrderByElements() ]}void SelectItemsList() :{}{  SelectItem()  (    "," SelectItem()  )*}void SelectItem() #void :{  String alias = null;}{  ("*") #AllCol| LOOKAHEAD(AllTableColumns())  (    AllTableColumns()  ) #AllTableCol|  (    SimpleExpression()    [      alias = Alias()      {        jjtThis.setAlias(alias);      }    ]  ) #SelectExpressionItem}void AllTableColumns() :{}{  Table() "." "*"}String Alias() #void :{  String retval = null;}{  [ < K_AS > ] retval = RelObjectName()  {    return retval;  }}void FromItemsList() :{}{  < K_FROM > FromItem() JoinsList()  (    "," FromItem() JoinsList()  )*}void FromItem() :{  String alias = null;}{  (    "(" SubSelect() ")"  | Table()  )  [    alias = Alias()    {      jjtThis.setAlias(alias);    }  ]}void JoinsList() :{}{  (    JoinerExpression()  )*}void JoinerExpression() :{}{  [    (      < K_LEFT > [ < K_OUTER > ]      {        jjtThis.setOuter(true);      }    )  | < K_INNER >  ]  < K_JOIN > FromItem()  (    (      < K_ON > Expression()    )  |    (      < K_USING > "(" Column()      (        "," Column()      )*      ")"    )  )}void WhereClause() :{}{  < K_WHERE > Expression()}void GroupByColumnReferences() :{}{  < K_GROUP > < K_BY > ColumnReference()  (    "," ColumnReference()  )*}void Having() :{}{  < K_HAVING > Expression()}void OrderByElements() :{}{  < K_ORDER > < K_BY > OrderByElement()  (    "," OrderByElement()  )*}void OrderByElement() :{}{  ColumnReference()  [    < K_ASC >  |    (      < K_DESC >      {        jjtThis.setAsc(false);      }    )  ]}void Top() :{  Token token = null;}{  < K_TOP >  (    token = < S_INTEGER >    {      jjtThis.setRowCount(Long.parseLong(token.image));    }  | "?"    {      jjtThis.setRowCountJdbcParameter(true);    }  )}void ColumnReference() :{}{  (    LOOKAHEAD(Function())    (      Function()    )  | LOOKAHEAD(Column())    (      Column()    )  | LOOKAHEAD(ColumnIndex())    (      ColumnIndex()    )  | SimpleExpression()  )}void ColumnIndex() :{  Token token = null;}{  token = < S_INTEGER >  {    jjtThis.jjtSetValue(token.image);  }}void Expression() :{}{  (    LOOKAHEAD(OrExpression())    OrExpression()  | "(" Expression() ")"  )}void OrExpression() #void :{}{  (    AndExpression()    (      LOOKAHEAD(< K_OR >)      < K_OR > AndExpression()    )*  ) #Or(>1)}void AndExpression() #void :{}{  (    (      LOOKAHEAD(Condition())      Condition()    | [ < K_NOT > ] "(" OrExpression() ")"    )    (      LOOKAHEAD(< K_AND >)      < K_AND >      (        LOOKAHEAD(Condition())        Condition()      | "(" OrExpression() ")"      )    )*  ) #And(>1)}void Condition() #void :{}{  (    LOOKAHEAD(SQLCondition())    SQLCondition()  | RegularCondition()  )}void RegularCondition() :{  boolean leftExternalLink = false;  boolean rightExternalLink = false;  boolean isNot = false;}{  [    < K_NOT >    {      isNot = true;    }  ]  ComparisonItem()  [    "(+)"    {      leftExternalLink = true;    }  ]  (    ">"    {      jjtThis.setOper(">");    }  | "<"    {      jjtThis.setOper("<");    }  | "="    {      jjtThis.setOper("=");    }  | ">="    {      jjtThis.setOper(">=");    }  | "<="    {      jjtThis.setOper("<=");    }  |    (      "<>"    | "!="    )    {      jjtThis.setOper("<>");    }  )  ComparisonItem()  [    "(+)"    {      rightExternalLink = true;    }  ]  {    jjtThis.setLeftExternalLink(leftExternalLink);    jjtThis.setRightExternalLink(rightExternalLink);    jjtThis.setNot(isNot);  }}void SQLCondition() #void :{}{  (    LOOKAHEAD(InExpression())    InExpression()  | LOOKAHEAD(Between())    Between()  | LOOKAHEAD(IsNullExpression())    IsNullExpression()  | LOOKAHEAD(ExistsExpression())    ExistsExpression()  | LikeExpression()  )}void InExpression() :{}{  SimpleExpression()  [    < K_NOT >    {      jjtThis.setNotin(true);    }  ]  < K_IN > "("  (    LOOKAHEAD(SubSelect())    SubSelect()  | SimpleExpressionList()  )  ")"}void Between() :{}{  SimpleExpression()  [    < K_NOT >    {      jjtThis.setNot(true);    }  ]  < K_BETWEEN > SimpleExpression() < K_AND > SimpleExpression()}void LikeExpression() :{}{  SimpleExpression()  [    < K_NOT >    {      jjtThis.setNotlike(true);    }  ]  < K_LIKE > SimpleExpression() [ < K_ESCAPE > < S_CHAR_LITERAL > ]}void IsNullExpression() :{}{  SimpleExpression() < K_IS >  [    < K_NOT >    {      jjtThis.setNotnull(true);    }  ]  < K_NULL >}void ExistsExpression() :{}{  [    < K_NOT >    {      jjtThis.setNotexists(true);    }  ]  < K_EXISTS > SimpleExpression()}void SQLExpressionList() :{}{  Expression()  (    "," Expression()  )*}void SimpleExpressionList() :{}{  SimpleExpression()  (    "," SimpleExpression()  )*}void ComparisonItem() #void :{}{  (    AllComparisonExpression()  | AnyComparisonExpression()  | SimpleExpression()  )}void AllComparisonExpression() :{}{  < K_ALL > "(" SubSelect() ")"}void AnyComparisonExpression() :{}{  (    < K_ANY >  | < K_SOME >  )  "(" SubSelect() ")"}void SimpleExpression() #void :{}{  (    (      LOOKAHEAD(AdditiveExpression())      AdditiveExpression()    | "(" AdditiveExpression() ")"    )  )}void AdditiveExpression() #void :{}{  (    MultiplicativeExpression()    {      jjtThis.getOpers().add("");    }    (      LOOKAHEAD(2)      (        "+"        {          jjtThis.getOpers().add("+");        }      | "-"        {          jjtThis.getOpers().add("-");        }      | "||"        {          jjtThis.getOpers().add("||");        }      )      MultiplicativeExpression()    )*  ) #Add(>1)}void MultiplicativeExpression() #void :{}{  (    (      LOOKAHEAD(PrimaryExpression())      PrimaryExpression()    | "(" AdditiveExpression() ")"    )    {      jjtThis.getOpers().add("");    }    (      LOOKAHEAD(2)      (        "*"        {          jjtThis.getOpers().add("*");        }      | "/"        {          jjtThis.getOpers().add("/");        }      )      (        LOOKAHEAD(PrimaryExpression())        PrimaryExpression()      | "(" AdditiveExpression() ")"      )    )*  ) #Mult(>1)}void PrimaryExpression() #void :{  Token token = null;  String tmp = "";  String tmp2 = "";}{  (    (< K_NULL >) #Null  | CaseWhenExpression()  | ("?") #JdbcParameter  | LOOKAHEAD(    [      "+"    | "-"    ]    Function())    (      [        "+"      | "-"        {          tmp = "-";         }      ]      Function()    ) #InverseExpression    (      "-".equals(tmp)    )  | LOOKAHEAD(    [      "+"    | "-"    ]    < S_DOUBLE >)    (      [        "+"      | "-"        {          tmp = "-";         }      ]      token = < S_DOUBLE >      {        jjtThis.jjtSetValue(tmp+ token.image);      }    ) #Double  | LOOKAHEAD(    [      "+"    | "-"    ]    < S_INTEGER >)    (      [        "+"      | "-"        {          tmp = "-";         }      ]      token = < S_INTEGER >      {        jjtThis.jjtSetValue(tmp+ token.image);      }    ) #Integer  | LOOKAHEAD(2)    (      [        "+"      | "-"        {          tmp = "-";         }      ]      Column()    ) #InverseExpression    (      "-".equals(tmp)    )  | LOOKAHEAD(2)    (      [        "+"      | "-"        {          tmp = "-";         }      ]      "(" PrimaryExpression() ")"    ) #InverseExpression    (      "-".equals(tmp)    )  |    (      token = < S_CHAR_LITERAL >      {        jjtThis.jjtSetValue(token.image);      }    ) #String  |    (      [        "+"      | "-"        {          tmp = "-";         }      ]      "(" SubSelect() ")"    ) #InverseExpression    (      "-".equals(tmp)    )  | "{d" token = < S_CHAR_LITERAL > "}"  | "{t" token = < S_CHAR_LITERAL > "}"  | "{ts" token = < S_CHAR_LITERAL > "}"  | LOOKAHEAD(UDFFunc())    UDFFunc()  )}void UDFFunc() :{  String s = null;  Map parameters = null;}{  "$" s = RelObjectName()  {    jjtThis.setName(s);  }  "("  [    parameters = UDFParameterList()    {      jjtThis.setParameters(parameters);    }  ]  ")"}Map UDFParameterList() #void :{  Map result = new HashMap();  String [ ] nameAndValue = null;}{  nameAndValue = UDFParameter()  {    result.put(nameAndValue [ 0 ], nameAndValue [ 1 ]);  }  (    "," nameAndValue = UDFParameter()    {      result.put(nameAndValue [ 0 ], nameAndValue [ 1 ]);    }  )*  {    return result;  }}String [ ] UDFParameter() #void :{  String name, value;  String [ ] nameAndValue = new String [ 2 ];}{  name = RelObjectName() "=" value = RelObjectName()  {    nameAndValue [ 0 ] = name;    nameAndValue [ 1 ] = value;    return nameAndValue;  }}void CaseWhenExpression() :{}{  < K_CASE >  (    (      WhenThenSearchCondition()    )+    [ < K_ELSE > PrimaryExpression() ]  | PrimaryExpression()    (      WhenThenValue()    )*    [ < K_ELSE > PrimaryExpression() ]  )  < K_END >}void WhenThenSearchCondition() :{}{  < K_WHEN > Expression() < K_THEN > PrimaryExpression()}void WhenThenValue() :{}{  < K_WHEN > PrimaryExpression() < K_THEN > PrimaryExpression()}void Function() :{  String funcName = null;  String tmp = null;}{  [ "{fn" ]  (    funcName = RelObjectName()  | < K_REPLACE >    {      funcName = "REPLACE";    }  )  [    "." tmp = RelObjectName()    {      funcName += "."+ tmp;    }    [      "." tmp = RelObjectName()      {        funcName += "."+ tmp;      }    ]  ]  "("  [ /*[<K_DISTINCT> | <K_ALL>]*/    (      SimpleExpressionList()    | "*"      {        jjtThis.setAllColumns(true);      }    )  ]  ")" [ "}" ]  {    jjtThis.setName(funcName);  }}void SubSelect() :{}{  SelectBody()}void AList() :{  Token tk = null;}{  "("  (    (      tk = < S_INTEGER >    | tk = < S_DOUBLE >    | tk = < S_CHAR_LITERAL >    | tk = < S_IDENTIFIER >    )    [ "," ]  )*  ")"}void ColumnsNamesList() :{  Token tk = null;}{  "(" tk = < S_IDENTIFIER > ("," tk = < S_IDENTIFIER >)* ")"}
