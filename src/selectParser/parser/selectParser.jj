/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ..\src\selectParser\parser\selectParser.jj */
/*@egen*/options{
  IGNORE_CASE = true;
               
                 
  STATIC = false;
  UNICODE_INPUT = true;
}
PARSER_BEGIN(SelectParser)
package selectParser.parser;
import java.io.ByteArrayInputStream;
import java.util.HashMap;
import java.util.Map;
/**
 * The parser generated by JavaCC
 */
public class SelectParser/*@bgen(jjtree)*/implements SelectParserTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTSelectParserState jjtree = new JJTSelectParserState();

/*@egen*/
  public static void main(String args[])throws ParseException{
    SelectParser p = null;
    System.out.println("Reading from buffer");
    //String statement = "SELECT *,u.*,u.a,b,(select i from v where u=mytable.d) FROM mytable WHERE  u>2 LIMIT 3, ?";
String statement = "SELECT distinct a FROM mytable1,mytable2 where a=b and x between 1 and 11 and (u=v or x=u)";
    ByteArrayInputStream is = new ByteArrayInputStream(statement.getBytes());
    p = new SelectParser(is);
    SimpleNode t = p.Select();
    System.out.println("Parse Successfull");
    t.dump(">");
  }
}
PARSER_END(SelectParser)
SKIP:{
  " "
  | "\t"
  | "\r"
  | "\n"
}
TOKEN:/* SQL Keywords. prefixed with K_ to avoid name clashes */
{
  <K_AS:"AS">
  | <K_BY:"BY">
  | <K_DO:"DO">
  | <K_IS:"IS">
  | <K_IN:"IN">
  | <K_OR:"OR">
  | <K_ON:"ON">
  | <K_ALL:"ALL">
  | <K_AND:"AND">
  | <K_ANY:"ANY">
  | <K_KEY:"KEY">
  | <K_NOT:"NOT">
  | <K_SET:"SET">
  | <K_ASC:"ASC">
  | <K_TOP:"TOP">
  | <K_END:"END">
  | <K_DESC:"DESC">
  | <K_INTO:"INTO">
  | <K_NULL:"NULL">
  | <K_LIKE:"LIKE">
  | <K_DROP:"DROP">
  | <K_JOIN:"JOIN">
  | <K_LEFT:"LEFT">
  | <K_FROM:"FROM">
  | <K_OPEN:"OPEN">
  | <K_CASE:"CASE">
  | <K_WHEN:"WHEN">
  | <K_THEN:"THEN">
  | <K_ELSE:"ELSE">
  | <K_SOME:"SOME">
  | <K_TABLE:"TABLE">
  | <K_WHERE:"WHERE">
  | <K_USING:"USING">
  | <K_UNION:"UNION">
  | <K_GROUP:"GROUP">
  | <K_BEGIN:"BEGIN">
  | <K_INDEX:"INDEX">
  | <K_INNER:"INNER">
  | <K_LIMIT:"LIMIT">
  | <K_OUTER:"OUTER">
  | <K_ORDER:"ORDER">
  | <K_DELETE:"DELETE">
  | <K_CREATE:"CREATE">
  | <K_SELECT:"SELECT">
  | <K_OFFSET:"OFFSET">
  | <K_EXISTS:"EXISTS">
  | <K_HAVING:"HAVING">
  | <K_INSERT:"INSERT">
  | <K_UPDATE:"UPDATE">
  | <K_VALUES:"VALUES">
  | <K_ESCAPE:"ESCAPE">
  | <K_PRIMARY:"PRIMARY">
  | <K_NATURAL:"NATURAL">
  | <K_REPLACE:"REPLACE">
  | <K_BETWEEN:"BETWEEN">
  | <K_TRUNCATE:"TRUNCATE">
  | <K_DISTINCT:"DISTINCT">
  | <K_INTERSECT:"INTERSECT">
}
TOKEN:/* Numeric Constants */
{
  <S_DOUBLE:((<S_INTEGER>)?"."<S_INTEGER>(["e", "E"](["-", "+"])?<S_INTEGER>)?
  | (<S_INTEGER>)+(".")?["e", "E"](["-", "+"])?(<S_INTEGER>)+)>
  | <S_INTEGER:(<DIGIT>)+>
  | <#DIGIT:["0"-"9"]>
}
SPECIAL_TOKEN:{
  <LINE_COMMENT:"--"(~["\r", "\n"])*>
  | <MULTI_LINE_COMMENT:"/*"(~["*"])*"*"("*"
  | (~["*", "/"](~["*"])*"*"))*"/">
}
TOKEN:{
  <S_IDENTIFIER:(<LETTER>)+(<DIGIT>
  | <LETTER>
  | <SPECIAL_CHARS>)*>
  | <#LETTER:["a"-"z", "A"-"Z"]>
  | <#SPECIAL_CHARS:"$"
  | "_">
  | <S_CHAR_LITERAL:"'"(~["'"])*"'"("'"(~["'"])*"'")*>
  | <S_QUOTED_IDENTIFIER:"\""(~["\n", "\r", "\""])*"\"">
}
void Column():{/*@bgen(jjtree) Column */
  ASTColumn jjtn000 = new ASTColumn(JJTCOLUMN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String name1 = null;
  String name2 = null;
  String name3 = null;
  boolean isExternalLink = false;
}
{/*@bgen(jjtree) Column */
try {
/*@egen*/
  // [schema.][tabella.]colonna
name1 = RelObjectName()["."name2 = RelObjectName()["."name3 = RelObjectName()]]["(""+"")"{
    isExternalLink = true;
  }
  ]/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/{
    String colName = null;
    String table = null;
    String schema = null;
    if (name3 != null){
      schema = name1;
      table = name2;
      colName = name3;
    }
    else if (name2 != null){
      table = name1;
      colName = name2;
    }
    else {
      colName = name1;
    }
    jjtn000.setSchema(schema);
    jjtn000.setTable(table);
    jjtn000.setColumn(colName);
  }/*@bgen(jjtree)*/
} catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    throw (RuntimeException)jjte000;
  }
  if (jjte000 instanceof ParseException) {
    throw (ParseException)jjte000;
  }
  throw (Error)jjte000;
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}
String RelObjectName()      :{
  Token tk = null;
}
{
  (tk = <S_IDENTIFIER>
  | tk = <S_QUOTED_IDENTIFIER>){
    return tk.image;
  }
}
void TableWithAlias():{/*@bgen(jjtree) TableWithAlias */
  ASTTableWithAlias jjtn000 = new ASTTableWithAlias(JJTTABLEWITHALIAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) TableWithAlias */
  try {
/*@egen*/
  Table()[Alias()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void Table():{/*@bgen(jjtree) Table */
  ASTTable jjtn000 = new ASTTable(JJTTABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String name1 = null;
  String name2 = null;
}
{/*@bgen(jjtree) Table */
  try {
/*@egen*/
  (LOOKAHEAD(3)name1 = RelObjectName()"."name2 = RelObjectName()/*@bgen(jjtree)*/
                                                                {
                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                  jjtc000 = false;
                                                                }
/*@egen*/{
    jjtn000.setSchema(name1);
    jjtn000.setTable(name2);
  }
  | name1 = RelObjectName()/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                           }
/*@egen*/{
    jjtn000.setTable(name1);
  }
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
ASTSelect Select():{/*@bgen(jjtree) Select */
  ASTSelect jjtn000 = new ASTSelect(JJTSELECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Select */
  try {
/*@egen*/
  SelectBody()/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/{
    return jjtn000;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void SelectBody()      :{}{
  (LOOKAHEAD(Union())Union()
  | PlainSelect())
}
void Union():{/*@bgen(jjtree) Union */
        ASTUnion jjtn000 = new ASTUnion(JJTUNION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	boolean isAll = false;
}{/*@bgen(jjtree) Union */
  try {
/*@egen*/
  ("("PlainSelect()")"<K_UNION>[<K_ALL>{isAll=true;}]"("PlainSelect()")"(<K_UNION>[<K_ALL>{isAll=true;}]"("PlainSelect()")")*[OrderByElements()])
  | (PlainSelect()<K_UNION>[<K_ALL>{isAll=true;}]PlainSelect()(<K_UNION>[<K_ALL>{isAll=true;}]PlainSelect())*)/*@bgen(jjtree)*/
                                                                                                              {
                                                                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                                                                jjtc000 = false;
                                                                                                              }
/*@egen*/{jjtn000.setAll(isAll);}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void PlainSelect():{/*@bgen(jjtree) PlainSelect */
  ASTPlainSelect jjtn000 = new ASTPlainSelect(JJTPLAINSELECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) PlainSelect */
  try {
/*@egen*/
  <K_SELECT>[<K_ALL>
  |/*@bgen(jjtree) Distinct */
    {
      ASTDistinct jjtn001 = new ASTDistinct(JJTDISTINCT);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
    }
    try {
/*@egen*/ (<K_DISTINCT>["ON""("SelectItemsList()")"])/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
    }
/*@egen*/         ][Top()]SelectItemsList()FromItemsList()[WhereClause()][GroupByColumnReferences()][Having()][OrderByElements()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void SelectItemsList():{/*@bgen(jjtree) SelectItemsList */
  ASTSelectItemsList jjtn000 = new ASTSelectItemsList(JJTSELECTITEMSLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SelectItemsList */
  try {
/*@egen*/
  SelectItem()(","SelectItem())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void SelectItem()      :{
  String alias = null;
}
{/*@bgen(jjtree) AllCol */
  {
    ASTAllCol jjtn001 = new ASTAllCol(JJTALLCOL);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  ("*")/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/       
  | LOOKAHEAD(AllTableColumns())/*@bgen(jjtree) AllTableCol */
                                {
                                  ASTAllTableCol jjtn002 = new ASTAllTableCol(JJTALLTABLECOL);
                                  boolean jjtc002 = true;
                                  jjtree.openNodeScope(jjtn002);
                                }
                                try {
/*@egen*/(AllTableColumns())/*@bgen(jjtree)*/
                                } catch (Throwable jjte002) {
                                  if (jjtc002) {
                                    jjtree.clearNodeScope(jjtn002);
                                    jjtc002 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte002 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte002;
                                  }
                                  if (jjte002 instanceof ParseException) {
                                    throw (ParseException)jjte002;
                                  }
                                  throw (Error)jjte002;
                                } finally {
                                  if (jjtc002) {
                                    jjtree.closeNodeScope(jjtn002, true);
                                  }
                                }
/*@egen*/            
  |/*@bgen(jjtree) SelectExpressionItem */
    {
      ASTSelectExpressionItem jjtn003 = new ASTSelectExpressionItem(JJTSELECTEXPRESSIONITEM);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
    }
    try {
/*@egen*/ (SimpleExpression()[alias = Alias(){
    jjtn003.setAlias(alias);
  }
  ])/*@bgen(jjtree)*/
    } catch (Throwable jjte003) {
      if (jjtc003) {
        jjtree.clearNodeScope(jjtn003);
        jjtc003 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte003 instanceof RuntimeException) {
        throw (RuntimeException)jjte003;
      }
      if (jjte003 instanceof ParseException) {
        throw (ParseException)jjte003;
      }
      throw (Error)jjte003;
    } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
    }
/*@egen*/                     
}
void AllTableColumns():{/*@bgen(jjtree) AllTableColumns */
  ASTAllTableColumns jjtn000 = new ASTAllTableColumns(JJTALLTABLECOLUMNS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AllTableColumns */
  try {
/*@egen*/
  Table()".""*"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
String Alias()      :{
  String retval = null;
}
{
  [<K_AS>]retval = RelObjectName(){
    return retval;
  }
}
void FromItemsList():{/*@bgen(jjtree) FromItemsList */
  ASTFromItemsList jjtn000 = new ASTFromItemsList(JJTFROMITEMSLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) FromItemsList */
  try {
/*@egen*/
  <K_FROM>FromItem()JoinsList()(","FromItem()JoinsList())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void FromItem():{/*@bgen(jjtree) FromItem */
  ASTFromItem jjtn000 = new ASTFromItem(JJTFROMITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String alias = null;
}
{/*@bgen(jjtree) FromItem */
  try {
/*@egen*/
  ("("SubSelect()")"
  | Table())[alias = Alias(){
    jjtn000.setAlias(alias);
  }
  ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void JoinsList():{/*@bgen(jjtree) JoinsList */
  ASTJoinsList jjtn000 = new ASTJoinsList(JJTJOINSLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) JoinsList */
  try {
/*@egen*/
  (JoinerExpression())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void JoinerExpression():{/*@bgen(jjtree) JoinerExpression */
  ASTJoinerExpression jjtn000 = new ASTJoinerExpression(JJTJOINEREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) JoinerExpression */
  try {
/*@egen*/
  [(<K_LEFT>[<K_OUTER>]{
    jjtn000.setOuter(true);
  }
  )
  | <K_INNER>]<K_JOIN>FromItem()((<K_ON>Expression())
  | (<K_USING>"("Column()(","Column())*")"))/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void WhereClause():{/*@bgen(jjtree) WhereClause */
  ASTWhereClause jjtn000 = new ASTWhereClause(JJTWHERECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) WhereClause */
  try {
/*@egen*/
  <K_WHERE>Expression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void GroupByColumnReferences():{/*@bgen(jjtree) GroupByColumnReferences */
  ASTGroupByColumnReferences jjtn000 = new ASTGroupByColumnReferences(JJTGROUPBYCOLUMNREFERENCES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) GroupByColumnReferences */
  try {
/*@egen*/
  <K_GROUP><K_BY>ColumnReference()(","ColumnReference())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void Having():{/*@bgen(jjtree) Having */
  ASTHaving jjtn000 = new ASTHaving(JJTHAVING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Having */
  try {
/*@egen*/
  <K_HAVING>Expression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void OrderByElements():{/*@bgen(jjtree) OrderByElements */
  ASTOrderByElements jjtn000 = new ASTOrderByElements(JJTORDERBYELEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) OrderByElements */
  try {
/*@egen*/
  <K_ORDER><K_BY>OrderByElement()(","OrderByElement())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void OrderByElement():{/*@bgen(jjtree) OrderByElement */
  ASTOrderByElement jjtn000 = new ASTOrderByElement(JJTORDERBYELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) OrderByElement */
  try {
/*@egen*/
  ColumnReference()[<K_ASC>
  | (<K_DESC>{
    jjtn000.setAsc(false);
  }
  )]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void Top():{/*@bgen(jjtree) Top */
  ASTTop jjtn000 = new ASTTop(JJTTOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token token = null;
}
{/*@bgen(jjtree) Top */
  try {
/*@egen*/
  <K_TOP>(token = <S_INTEGER>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/{
    jjtn000.setRowCount(Long.parseLong(token.image));
  }
  | "?"/*@bgen(jjtree)*/
       {
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
       }
/*@egen*/{
    jjtn000.setRowCountJdbcParameter(true);
  }
  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void ColumnReference():{/*@bgen(jjtree) ColumnReference */
  ASTColumnReference jjtn000 = new ASTColumnReference(JJTCOLUMNREFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ColumnReference */
        try {
/*@egen*/
	(LOOKAHEAD(Function())(Function())
  |LOOKAHEAD(Column())(Column())
  | LOOKAHEAD(ColumnIndex())(ColumnIndex())
  | SimpleExpression())/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}
void ColumnIndex():{/*@bgen(jjtree) ColumnIndex */
  ASTColumnIndex jjtn000 = new ASTColumnIndex(JJTCOLUMNINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token token = null;
}
{/*@bgen(jjtree) ColumnIndex */
  try {
/*@egen*/
  token = <S_INTEGER>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                     }
/*@egen*/{
    jjtn000.jjtSetValue(token.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void Expression():{/*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Expression */
  try {
/*@egen*/
  (LOOKAHEAD(OrExpression())OrExpression()
  | "("Expression()")")/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void OrExpression()      :{}{/*@bgen(jjtree) #Or(> 1) */
  {
    ASTOr jjtn001 = new ASTOr(JJTOR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (AndExpression()(LOOKAHEAD(<K_OR>)<K_OR>AndExpression())*)/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/       
}
void AndExpression()      :{}{/*@bgen(jjtree) #And(> 1) */
  {
    ASTAnd jjtn001 = new ASTAnd(JJTAND);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  ((LOOKAHEAD(Condition())Condition()
  | [<K_NOT>]"("OrExpression()")")(LOOKAHEAD(<K_AND>)<K_AND>(LOOKAHEAD(Condition())Condition()
  | "("OrExpression()")"))*)/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/        
}
void Condition()      :{}{
  (LOOKAHEAD(SQLCondition())SQLCondition()
  | RegularCondition())
}
void RegularCondition():{/*@bgen(jjtree) RegularCondition */
  ASTRegularCondition jjtn000 = new ASTRegularCondition(JJTREGULARCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  boolean leftExternalLink = false;
  boolean rightExternalLink = false;
  boolean isNot = false;
}
{/*@bgen(jjtree) RegularCondition */
  try {
/*@egen*/
  [<K_NOT>{
    isNot = true;
  }
  ]ComparisonItem()["(+)"{
    leftExternalLink = true;
  }
  ](">"{
    jjtn000.setOper(">");
  }
  | "<"{
    jjtn000.setOper("<");
  }
  | "="{
    jjtn000.setOper("=");
  }
  | ">="{
    jjtn000.setOper(">=");
  }
  | "<="{
    jjtn000.setOper("<=");
  }
  | ("<>"
  | "!="){
    jjtn000.setOper("<>");
  }
  )ComparisonItem()["(+)"{
    rightExternalLink = true;
  }
  ]/*@bgen(jjtree)*/
   {
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
   }
/*@egen*/{
    jjtn000.setLeftExternalLink(leftExternalLink);
    jjtn000.setRightExternalLink(rightExternalLink);
    jjtn000.setNot(isNot);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void SQLCondition()      :{}{
  (LOOKAHEAD(InExpression())InExpression()
  | LOOKAHEAD(Between())Between()
  | LOOKAHEAD(IsNullExpression())IsNullExpression()
  | LOOKAHEAD(ExistsExpression())ExistsExpression()
  | LikeExpression())
}
void InExpression():{/*@bgen(jjtree) InExpression */
  ASTInExpression jjtn000 = new ASTInExpression(JJTINEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) InExpression */
  try {
/*@egen*/
  SimpleExpression()[<K_NOT>{
    jjtn000.setNotin(true);
  }
  ]<K_IN>"("(LOOKAHEAD(SubSelect())SubSelect()
  | SimpleExpressionList())")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void Between():{/*@bgen(jjtree) Between */
  ASTBetween jjtn000 = new ASTBetween(JJTBETWEEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) Between */
  try {
/*@egen*/
  SimpleExpression()[<K_NOT>{
    jjtn000.setNot(true);
  }
  ]<K_BETWEEN>SimpleExpression()<K_AND>SimpleExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void LikeExpression():{/*@bgen(jjtree) LikeExpression */
  ASTLikeExpression jjtn000 = new ASTLikeExpression(JJTLIKEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) LikeExpression */
  try {
/*@egen*/
  SimpleExpression()[<K_NOT>{
    jjtn000.setNotlike(true);
  }
  ]<K_LIKE>SimpleExpression()[<K_ESCAPE><S_CHAR_LITERAL>]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void IsNullExpression():{/*@bgen(jjtree) IsNullExpression */
  ASTIsNullExpression jjtn000 = new ASTIsNullExpression(JJTISNULLEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) IsNullExpression */
  try {
/*@egen*/
  SimpleExpression()<K_IS>[<K_NOT>{
    jjtn000.setNotnull(true);
  }
  ]<K_NULL>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void ExistsExpression():{/*@bgen(jjtree) ExistsExpression */
  ASTExistsExpression jjtn000 = new ASTExistsExpression(JJTEXISTSEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) ExistsExpression */
  try {
/*@egen*/
  [<K_NOT>{
    jjtn000.setNotexists(true);
  }
  ]<K_EXISTS>SimpleExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void SQLExpressionList():{/*@bgen(jjtree) SQLExpressionList */
  ASTSQLExpressionList jjtn000 = new ASTSQLExpressionList(JJTSQLEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SQLExpressionList */
  try {
/*@egen*/
  Expression()(","Expression())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void SimpleExpressionList():{/*@bgen(jjtree) SimpleExpressionList */
  ASTSimpleExpressionList jjtn000 = new ASTSimpleExpressionList(JJTSIMPLEEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SimpleExpressionList */
  try {
/*@egen*/
  SimpleExpression()(","SimpleExpression())*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void ComparisonItem()      :{}{
  (AllComparisonExpression()
  | AnyComparisonExpression()
  | SimpleExpression())
}
void AllComparisonExpression():{/*@bgen(jjtree) AllComparisonExpression */
  ASTAllComparisonExpression jjtn000 = new ASTAllComparisonExpression(JJTALLCOMPARISONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AllComparisonExpression */
  try {
/*@egen*/
  <K_ALL>"("SubSelect()")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void AnyComparisonExpression():{/*@bgen(jjtree) AnyComparisonExpression */
  ASTAnyComparisonExpression jjtn000 = new ASTAnyComparisonExpression(JJTANYCOMPARISONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) AnyComparisonExpression */
  try {
/*@egen*/
  (<K_ANY>
  | <K_SOME>)"("SubSelect()")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void SimpleExpression()      :{}{
  ((LOOKAHEAD(AdditiveExpression())AdditiveExpression()
  | "("AdditiveExpression()")"))
}
void AdditiveExpression()      :{}{/*@bgen(jjtree) #Add(> 1) */
  {
    ASTAdd jjtn001 = new ASTAdd(JJTADD);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (MultiplicativeExpression(){
    jjtn001.getOpers().add("");
  }
  (LOOKAHEAD(2)("+"{
    jjtn001.getOpers().add("+");
  }
  | "-"{
    jjtn001.getOpers().add("-");
  }
  | "||"{
    jjtn001.getOpers().add("||");
  }
  )MultiplicativeExpression())*)/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/        
}
void MultiplicativeExpression()      :{}{/*@bgen(jjtree) #Mult(> 1) */
  {
    ASTMult jjtn001 = new ASTMult(JJTMULT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  ((LOOKAHEAD(PrimaryExpression())PrimaryExpression()
  | "("AdditiveExpression()")"){
    jjtn001.getOpers().add("");
  }
  (LOOKAHEAD(2)("*"{
    jjtn001.getOpers().add("*");
  }
  | "/"{
    jjtn001.getOpers().add("/");
  }
  )(LOOKAHEAD(PrimaryExpression())PrimaryExpression()
  | "("AdditiveExpression()")"))*)/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/         
}
void PrimaryExpression()      :{
  Token token = null;
  String tmp = "";
  String tmp2 = "";
}
{
  (/*@bgen(jjtree) Null */
   {
     ASTNull jjtn001 = new ASTNull(JJTNULL);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/(<K_NULL>)/*@bgen(jjtree)*/
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/     
  | CaseWhenExpression()
  |/*@bgen(jjtree) JdbcParameter */
    {
      ASTJdbcParameter jjtn002 = new ASTJdbcParameter(JJTJDBCPARAMETER);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
    }
    try {
/*@egen*/ ("?")/*@bgen(jjtree)*/
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
    }
/*@egen*/              
  | LOOKAHEAD(["+"
  | "-"]Function())/*@bgen(jjtree) #InverseExpression( "-" . equals ( tmp )) */
                   {
                     ASTInverseExpression jjtn003 = new ASTInverseExpression(JJTINVERSEEXPRESSION);
                     boolean jjtc003 = true;
                     jjtree.openNodeScope(jjtn003);
                   }
                   try {
/*@egen*/(["+"
  | "-"{
    tmp = "-";
  }
  ]Function())/*@bgen(jjtree)*/
                   } catch (Throwable jjte003) {
                     if (jjtc003) {
                       jjtree.clearNodeScope(jjtn003);
                       jjtc003 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte003 instanceof RuntimeException) {
                       throw (RuntimeException)jjte003;
                     }
                     if (jjte003 instanceof ParseException) {
                       throw (ParseException)jjte003;
                     }
                     throw (Error)jjte003;
                   } finally {
                     if (jjtc003) {
                       jjtree.closeNodeScope(jjtn003,  "-" . equals ( tmp ));
                     }
                   }
/*@egen*/                                   
  | LOOKAHEAD(["+"
  | "-"]<S_DOUBLE>)/*@bgen(jjtree) Double */
                   {
                     ASTDouble jjtn004 = new ASTDouble(JJTDOUBLE);
                     boolean jjtc004 = true;
                     jjtree.openNodeScope(jjtn004);
                   }
                   try {
/*@egen*/(["+"
  | "-"{
    tmp = "-";
  }
  ]token = <S_DOUBLE>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn004, true);
                       jjtc004 = false;
                     }
/*@egen*/{
    jjtn004.jjtSetValue(tmp+token.image);
  }
  )/*@bgen(jjtree)*/
                   } finally {
                     if (jjtc004) {
                       jjtree.closeNodeScope(jjtn004, true);
                     }
                   }
/*@egen*/       
  | LOOKAHEAD(["+"
  | "-"]<S_INTEGER>)/*@bgen(jjtree) Integer */
                    {
                      ASTInteger jjtn005 = new ASTInteger(JJTINTEGER);
                      boolean jjtc005 = true;
                      jjtree.openNodeScope(jjtn005);
                    }
                    try {
/*@egen*/(["+"
  | "-"{
    tmp = "-";
  }
  ]token = <S_INTEGER>/*@bgen(jjtree)*/
                      {
                        jjtree.closeNodeScope(jjtn005, true);
                        jjtc005 = false;
                      }
/*@egen*/{
    jjtn005.jjtSetValue(tmp+token.image);
  }
  )/*@bgen(jjtree)*/
                    } finally {
                      if (jjtc005) {
                        jjtree.closeNodeScope(jjtn005, true);
                      }
                    }
/*@egen*/        
  | LOOKAHEAD(2)/*@bgen(jjtree) #InverseExpression( "-" . equals ( tmp )) */
                {
                  ASTInverseExpression jjtn006 = new ASTInverseExpression(JJTINVERSEEXPRESSION);
                  boolean jjtc006 = true;
                  jjtree.openNodeScope(jjtn006);
                }
                try {
/*@egen*/(["+"
  | "-"{
    tmp = "-";
  }
  ]Column())/*@bgen(jjtree)*/
                } catch (Throwable jjte006) {
                  if (jjtc006) {
                    jjtree.clearNodeScope(jjtn006);
                    jjtc006 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte006 instanceof RuntimeException) {
                    throw (RuntimeException)jjte006;
                  }
                  if (jjte006 instanceof ParseException) {
                    throw (ParseException)jjte006;
                  }
                  throw (Error)jjte006;
                } finally {
                  if (jjtc006) {
                    jjtree.closeNodeScope(jjtn006,  "-" . equals ( tmp ));
                  }
                }
/*@egen*/                                   
  | LOOKAHEAD(2)/*@bgen(jjtree) #InverseExpression( "-" . equals ( tmp )) */
                {
                  ASTInverseExpression jjtn007 = new ASTInverseExpression(JJTINVERSEEXPRESSION);
                  boolean jjtc007 = true;
                  jjtree.openNodeScope(jjtn007);
                }
                try {
/*@egen*/(["+"
  | "-"{
    tmp = "-";
  }
  ]"("PrimaryExpression()")")/*@bgen(jjtree)*/
                } catch (Throwable jjte007) {
                  if (jjtc007) {
                    jjtree.clearNodeScope(jjtn007);
                    jjtc007 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte007 instanceof RuntimeException) {
                    throw (RuntimeException)jjte007;
                  }
                  if (jjte007 instanceof ParseException) {
                    throw (ParseException)jjte007;
                  }
                  throw (Error)jjte007;
                } finally {
                  if (jjtc007) {
                    jjtree.closeNodeScope(jjtn007,  "-" . equals ( tmp ));
                  }
                }
/*@egen*/                                   
  |/*@bgen(jjtree) String */
    {
      ASTString jjtn008 = new ASTString(JJTSTRING);
      boolean jjtc008 = true;
      jjtree.openNodeScope(jjtn008);
    }
    try {
/*@egen*/ (token = <S_CHAR_LITERAL>/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn008, true);
                               jjtc008 = false;
                             }
/*@egen*/{
    jjtn008.jjtSetValue(token.image);
  }
  )/*@bgen(jjtree)*/
    } finally {
      if (jjtc008) {
        jjtree.closeNodeScope(jjtn008, true);
      }
    }
/*@egen*/       
  |/*@bgen(jjtree) #InverseExpression( "-" . equals ( tmp )) */
    {
      ASTInverseExpression jjtn009 = new ASTInverseExpression(JJTINVERSEEXPRESSION);
      boolean jjtc009 = true;
      jjtree.openNodeScope(jjtn009);
    }
    try {
/*@egen*/ (["+"
  | "-"{
    tmp = "-";
  }
  ]"("SubSelect()")")/*@bgen(jjtree)*/
    } catch (Throwable jjte009) {
      if (jjtc009) {
        jjtree.clearNodeScope(jjtn009);
        jjtc009 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte009 instanceof RuntimeException) {
        throw (RuntimeException)jjte009;
      }
      if (jjte009 instanceof ParseException) {
        throw (ParseException)jjte009;
      }
      throw (Error)jjte009;
    } finally {
      if (jjtc009) {
        jjtree.closeNodeScope(jjtn009,  "-" . equals ( tmp ));
      }
    }
/*@egen*/                                   
  | "{d"token = <S_CHAR_LITERAL>"}"
  | "{t"token = <S_CHAR_LITERAL>"}"
  | "{ts"token = <S_CHAR_LITERAL>"}"
  | LOOKAHEAD(UDFFunc())UDFFunc())
}
void UDFFunc():{/*@bgen(jjtree) UDFFunc */
  ASTUDFFunc jjtn000 = new ASTUDFFunc(JJTUDFFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String s = null;
  Map parameters = null;
}
{/*@bgen(jjtree) UDFFunc */
  try {
/*@egen*/
  "$"s = RelObjectName(){
    jjtn000.setName(s);
  }
  "("[parameters = UDFParameterList(){
    jjtn000.setParameters(parameters);
  }
  ]")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
Map UDFParameterList()      :{
  Map result = new HashMap();
  String[]nameAndValue = null;
}
{
  nameAndValue = UDFParameter(){
    result.put(nameAndValue[0], nameAndValue[1]);
  }
  (","nameAndValue = UDFParameter(){
    result.put(nameAndValue[0], nameAndValue[1]);
  }
  )*{
    return result;
  }
}
String[]UDFParameter()      :{
  String name, value;
  String[]nameAndValue = new String[2];
}
{
  name = RelObjectName()"="value = RelObjectName(){
    nameAndValue[0] = name;
    nameAndValue[1] = value;
    return nameAndValue;
  }
}

void CaseWhenExpression():{/*@bgen(jjtree) CaseWhenExpression */
  ASTCaseWhenExpression jjtn000 = new ASTCaseWhenExpression(JJTCASEWHENEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) CaseWhenExpression */
  try {
/*@egen*/
  <K_CASE>((WhenThenSearchCondition())+[<K_ELSE>PrimaryExpression()]
  | PrimaryExpression()(WhenThenValue())*[<K_ELSE>PrimaryExpression()])<K_END>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void WhenThenSearchCondition():{/*@bgen(jjtree) WhenThenSearchCondition */
  ASTWhenThenSearchCondition jjtn000 = new ASTWhenThenSearchCondition(JJTWHENTHENSEARCHCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) WhenThenSearchCondition */
  try {
/*@egen*/
  <K_WHEN>Expression()<K_THEN>PrimaryExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void WhenThenValue():{/*@bgen(jjtree) WhenThenValue */
  ASTWhenThenValue jjtn000 = new ASTWhenThenValue(JJTWHENTHENVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) WhenThenValue */
  try {
/*@egen*/
  <K_WHEN>PrimaryExpression()<K_THEN>PrimaryExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void Function():{/*@bgen(jjtree) Function */
  ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  String funcName = null;
  String tmp = null;
}
{/*@bgen(jjtree) Function */
  try {
/*@egen*/
  ["{fn"](funcName = RelObjectName()
  | <K_REPLACE>{
    funcName = "REPLACE";
  }
  )["."tmp = RelObjectName(){
    funcName+="."+tmp;
  }
  ["."tmp = RelObjectName(){
    funcName+="."+tmp;
  }
  ]]"("[/*[<K_DISTINCT> | <K_ALL>]*/
(SimpleExpressionList()
  | "*"{
    jjtn000.setAllColumns(true);
  }
  )]")"["}"]/*@bgen(jjtree)*/
            {
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
            }
/*@egen*/{
    jjtn000.setName(funcName);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void SubSelect():{/*@bgen(jjtree) SubSelect */
  ASTSubSelect jjtn000 = new ASTSubSelect(JJTSUBSELECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}{/*@bgen(jjtree) SubSelect */
  try {
/*@egen*/
  SelectBody()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void AList():{/*@bgen(jjtree) AList */
  ASTAList jjtn000 = new ASTAList(JJTALIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token tk = null;
}
{/*@bgen(jjtree) AList */
  try {
/*@egen*/
  "("((tk = <S_INTEGER>
  | tk = <S_DOUBLE>
  | tk = <S_CHAR_LITERAL>
  | tk = <S_IDENTIFIER>)[","])*")"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
void ColumnsNamesList():{/*@bgen(jjtree) ColumnsNamesList */
  ASTColumnsNamesList jjtn000 = new ASTColumnsNamesList(JJTCOLUMNSNAMESLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token tk = null;
}
{/*@bgen(jjtree) ColumnsNamesList */
  try {
/*@egen*/
  "("tk = <S_IDENTIFIER>(","tk = <S_IDENTIFIER>)*")"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}
