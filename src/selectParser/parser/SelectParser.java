/* Generated By:JJTree&JavaCC: Do not edit this line. SelectParser.java */
package selectParser.parser;
import java.io.ByteArrayInputStream;
import java.util.HashMap;
import java.util.Map;
/**
 * The parser generated by JavaCC
 */
public class SelectParser/*@bgen(jjtree)*/implements SelectParserTreeConstants, SelectParserConstants {/*@bgen(jjtree)*/
  protected JJTSelectParserState jjtree = new JJTSelectParserState();public static void main(String args[])throws ParseException{
    SelectParser p = null;
    System.out.println("Reading from buffer");
    //String statement = "SELECT *,u.*,u.a,b,(select i from v where u=mytable.d) FROM mytable WHERE  u>2 LIMIT 3, ?";
String statement = "SELECT distinct a FROM mytable1,mytable2 where a=b and x between 1 and 11 and (u=v or x=u)";
    ByteArrayInputStream is = new ByteArrayInputStream(statement.getBytes());
    p = new SelectParser(is);
    SimpleNode t = p.Select();
    System.out.println("Parse Successfull");
    t.dump(">");
  }

  final public void Column() throws ParseException {
               /*@bgen(jjtree) Column */
  ASTColumn jjtn000 = new ASTColumn(JJTCOLUMN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String name1 = null;
  String name2 = null;
  String name3 = null;
  boolean isExternalLink = false;
    try {
      // [schema.][tabella.]colonna
      name1 = RelObjectName();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 73:
        jj_consume_token(73);
        name2 = RelObjectName();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 73:
          jj_consume_token(73);
          name3 = RelObjectName();
          break;
        default:
          jj_la1[0] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[1] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 74:
        jj_consume_token(74);
        jj_consume_token(75);
        jj_consume_token(76);
    isExternalLink = true;
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
    String colName = null;
    String table = null;
    String schema = null;
    if (name3 != null){
      schema = name1;
      table = name2;
      colName = name3;
    }
    else if (name2 != null){
      table = name1;
      colName = name2;
    }
    else {
      colName = name1;
    }
    jjtn000.setSchema(schema);
    jjtn000.setTable(table);
    jjtn000.setColumn(colName);
    } catch (Throwable jjte000) {
  if (jjtc000) {
    jjtree.clearNodeScope(jjtn000);
    jjtc000 = false;
  } else {
    jjtree.popNode();
  }
  if (jjte000 instanceof RuntimeException) {
    {if (true) throw (RuntimeException)jjte000;}
  }
  if (jjte000 instanceof ParseException) {
    {if (true) throw (ParseException)jjte000;}
  }
  {if (true) throw (Error)jjte000;}
    } finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
    }
  }

  final public String RelObjectName() throws ParseException {
  Token tk = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      tk = jj_consume_token(S_IDENTIFIER);
      break;
    case S_QUOTED_IDENTIFIER:
      tk = jj_consume_token(S_QUOTED_IDENTIFIER);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return tk.image;}
    throw new Error("Missing return statement in function");
  }

  final public void TableWithAlias() throws ParseException {
                       /*@bgen(jjtree) TableWithAlias */
  ASTTableWithAlias jjtn000 = new ASTTableWithAlias(JJTTABLEWITHALIAS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Table();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AS:
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:
        Alias();
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Table() throws ParseException {
              /*@bgen(jjtree) Table */
  ASTTable jjtn000 = new ASTTable(JJTTABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String name1 = null;
  String name2 = null;
    try {
      if (jj_2_1(3)) {
        name1 = RelObjectName();
        jj_consume_token(73);
        name2 = RelObjectName();
                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                  jjtc000 = false;
    jjtn000.setSchema(name1);
    jjtn000.setTable(name2);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_IDENTIFIER:
        case S_QUOTED_IDENTIFIER:
          name1 = RelObjectName();
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
    jjtn000.setTable(name1);
          break;
        default:
          jj_la1[5] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public ASTSelect Select() throws ParseException {
                    /*@bgen(jjtree) Select */
  ASTSelect jjtn000 = new ASTSelect(JJTSELECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SelectBody();
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void SelectBody() throws ParseException {
    if (jj_2_2(2147483647)) {
      Union();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_SELECT:
        PlainSelect();
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Union() throws ParseException {
              /*@bgen(jjtree) Union */
        ASTUnion jjtn000 = new ASTUnion(JJTUNION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);boolean isAll = false;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 74:
        jj_consume_token(74);
        PlainSelect();
        jj_consume_token(76);
        jj_consume_token(K_UNION);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ALL:
          jj_consume_token(K_ALL);
                                        isAll=true;
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
        jj_consume_token(74);
        PlainSelect();
        jj_consume_token(76);
        label_1:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_UNION:
            ;
            break;
          default:
            jj_la1[8] = jj_gen;
            break label_1;
          }
          jj_consume_token(K_UNION);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_ALL:
            jj_consume_token(K_ALL);
                                                                                           isAll=true;
            break;
          default:
            jj_la1[9] = jj_gen;
            ;
          }
          jj_consume_token(74);
          PlainSelect();
          jj_consume_token(76);
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ORDER:
          OrderByElements();
          break;
        default:
          jj_la1[10] = jj_gen;
          ;
        }
        break;
      case K_SELECT:
        PlainSelect();
        jj_consume_token(K_UNION);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ALL:
          jj_consume_token(K_ALL);
                                    isAll=true;
          break;
        default:
          jj_la1[11] = jj_gen;
          ;
        }
        PlainSelect();
        label_2:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_UNION:
            ;
            break;
          default:
            jj_la1[12] = jj_gen;
            break label_2;
          }
          jj_consume_token(K_UNION);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_ALL:
            jj_consume_token(K_ALL);
                                                                                 isAll=true;
            break;
          default:
            jj_la1[13] = jj_gen;
            ;
          }
          PlainSelect();
        }
                                                                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                                                                jjtc000 = false;
                                                                                                               jjtn000.setAll(isAll);
        break;
      default:
        jj_la1[14] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PlainSelect() throws ParseException {
                    /*@bgen(jjtree) PlainSelect */
  ASTPlainSelect jjtn000 = new ASTPlainSelect(JJTPLAINSELECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_SELECT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ALL:
      case K_DISTINCT:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ALL:
          jj_consume_token(K_ALL);
          break;
        case K_DISTINCT:
      ASTDistinct jjtn001 = new ASTDistinct(JJTDISTINCT);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
          try {
            jj_consume_token(K_DISTINCT);
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case K_ON:
              jj_consume_token(K_ON);
              jj_consume_token(74);
              SelectItemsList();
              jj_consume_token(76);
              break;
            default:
              jj_la1[15] = jj_gen;
              ;
            }
          } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte001;}
      }
      if (jjte001 instanceof ParseException) {
        {if (true) throw (ParseException)jjte001;}
      }
      {if (true) throw (Error)jjte001;}
          } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
      }
          }
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_TOP:
        Top();
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      SelectItemsList();
      FromItemsList();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_WHERE:
        WhereClause();
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_GROUP:
        GroupByColumnReferences();
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_HAVING:
        Having();
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ORDER:
        OrderByElements();
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SelectItemsList() throws ParseException {
                        /*@bgen(jjtree) SelectItemsList */
  ASTSelectItemsList jjtn000 = new ASTSelectItemsList(JJTSELECTITEMSLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SelectItem();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 77:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_3;
        }
        jj_consume_token(77);
        SelectItem();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SelectItem() throws ParseException {
  String alias = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 78:
    ASTAllCol jjtn001 = new ASTAllCol(JJTALLCOL);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(78);
      } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
      }
      break;
    default:
      jj_la1[25] = jj_gen;
      if (jj_2_3(2147483647)) {
                                  ASTAllTableCol jjtn002 = new ASTAllTableCol(JJTALLTABLECOL);
                                  boolean jjtc002 = true;
                                  jjtree.openNodeScope(jjtn002);
        try {
          AllTableColumns();
        } catch (Throwable jjte002) {
                                  if (jjtc002) {
                                    jjtree.clearNodeScope(jjtn002);
                                    jjtc002 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte002 instanceof RuntimeException) {
                                    {if (true) throw (RuntimeException)jjte002;}
                                  }
                                  if (jjte002 instanceof ParseException) {
                                    {if (true) throw (ParseException)jjte002;}
                                  }
                                  {if (true) throw (Error)jjte002;}
        } finally {
                                  if (jjtc002) {
                                    jjtree.closeNodeScope(jjtn002, true);
                                  }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_NULL:
        case K_CASE:
        case K_REPLACE:
        case S_DOUBLE:
        case S_INTEGER:
        case S_IDENTIFIER:
        case S_CHAR_LITERAL:
        case S_QUOTED_IDENTIFIER:
        case 74:
        case 75:
        case 79:
        case 88:
        case 91:
        case 93:
        case 94:
        case 95:
        case 96:
      ASTSelectExpressionItem jjtn003 = new ASTSelectExpressionItem(JJTSELECTEXPRESSIONITEM);
      boolean jjtc003 = true;
      jjtree.openNodeScope(jjtn003);
          try {
            SimpleExpression();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case K_AS:
            case S_IDENTIFIER:
            case S_QUOTED_IDENTIFIER:
              alias = Alias();
    jjtn003.setAlias(alias);
              break;
            default:
              jj_la1[24] = jj_gen;
              ;
            }
          } catch (Throwable jjte003) {
      if (jjtc003) {
        jjtree.clearNodeScope(jjtn003);
        jjtc003 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte003 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte003;}
      }
      if (jjte003 instanceof ParseException) {
        {if (true) throw (ParseException)jjte003;}
      }
      {if (true) throw (Error)jjte003;}
          } finally {
      if (jjtc003) {
        jjtree.closeNodeScope(jjtn003, true);
      }
          }
          break;
        default:
          jj_la1[26] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void AllTableColumns() throws ParseException {
                        /*@bgen(jjtree) AllTableColumns */
  ASTAllTableColumns jjtn000 = new ASTAllTableColumns(JJTALLTABLECOLUMNS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Table();
      jj_consume_token(73);
      jj_consume_token(78);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public String Alias() throws ParseException {
  String retval = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_AS:
      jj_consume_token(K_AS);
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    retval = RelObjectName();
    {if (true) return retval;}
    throw new Error("Missing return statement in function");
  }

  final public void FromItemsList() throws ParseException {
                      /*@bgen(jjtree) FromItemsList */
  ASTFromItemsList jjtn000 = new ASTFromItemsList(JJTFROMITEMSLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_FROM);
      FromItem();
      JoinsList();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 77:
          ;
          break;
        default:
          jj_la1[28] = jj_gen;
          break label_4;
        }
        jj_consume_token(77);
        FromItem();
        JoinsList();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FromItem() throws ParseException {
                 /*@bgen(jjtree) FromItem */
  ASTFromItem jjtn000 = new ASTFromItem(JJTFROMITEM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String alias = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 74:
        jj_consume_token(74);
        SubSelect();
        jj_consume_token(76);
        break;
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:
        Table();
        break;
      default:
        jj_la1[29] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AS:
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:
        alias = Alias();
    jjtn000.setAlias(alias);
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void JoinsList() throws ParseException {
                  /*@bgen(jjtree) JoinsList */
  ASTJoinsList jjtn000 = new ASTJoinsList(JJTJOINSLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_JOIN:
        case K_LEFT:
        case K_INNER:
          ;
          break;
        default:
          jj_la1[31] = jj_gen;
          break label_5;
        }
        JoinerExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void JoinerExpression() throws ParseException {
                         /*@bgen(jjtree) JoinerExpression */
  ASTJoinerExpression jjtn000 = new ASTJoinerExpression(JJTJOINEREXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_LEFT:
      case K_INNER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_LEFT:
          jj_consume_token(K_LEFT);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_OUTER:
            jj_consume_token(K_OUTER);
            break;
          default:
            jj_la1[32] = jj_gen;
            ;
          }
    jjtn000.setOuter(true);
          break;
        case K_INNER:
          jj_consume_token(K_INNER);
          break;
        default:
          jj_la1[33] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[34] = jj_gen;
        ;
      }
      jj_consume_token(K_JOIN);
      FromItem();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ON:
        jj_consume_token(K_ON);
        Expression();
        break;
      case K_USING:
        jj_consume_token(K_USING);
        jj_consume_token(74);
        Column();
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 77:
            ;
            break;
          default:
            jj_la1[35] = jj_gen;
            break label_6;
          }
          jj_consume_token(77);
          Column();
        }
        jj_consume_token(76);
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void WhereClause() throws ParseException {
                    /*@bgen(jjtree) WhereClause */
  ASTWhereClause jjtn000 = new ASTWhereClause(JJTWHERECLAUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_WHERE);
      Expression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void GroupByColumnReferences() throws ParseException {
                                /*@bgen(jjtree) GroupByColumnReferences */
  ASTGroupByColumnReferences jjtn000 = new ASTGroupByColumnReferences(JJTGROUPBYCOLUMNREFERENCES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_GROUP);
      jj_consume_token(K_BY);
      ColumnReference();
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 77:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_7;
        }
        jj_consume_token(77);
        ColumnReference();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Having() throws ParseException {
               /*@bgen(jjtree) Having */
  ASTHaving jjtn000 = new ASTHaving(JJTHAVING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_HAVING);
      Expression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void OrderByElements() throws ParseException {
                        /*@bgen(jjtree) OrderByElements */
  ASTOrderByElements jjtn000 = new ASTOrderByElements(JJTORDERBYELEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_ORDER);
      jj_consume_token(K_BY);
      OrderByElement();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 77:
          ;
          break;
        default:
          jj_la1[38] = jj_gen;
          break label_8;
        }
        jj_consume_token(77);
        OrderByElement();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void OrderByElement() throws ParseException {
                       /*@bgen(jjtree) OrderByElement */
  ASTOrderByElement jjtn000 = new ASTOrderByElement(JJTORDERBYELEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ColumnReference();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ASC:
      case K_DESC:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ASC:
          jj_consume_token(K_ASC);
          break;
        case K_DESC:
          jj_consume_token(K_DESC);
    jjtn000.setAsc(false);
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[40] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Top() throws ParseException {
            /*@bgen(jjtree) Top */
  ASTTop jjtn000 = new ASTTop(JJTTOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token token = null;
    try {
      jj_consume_token(K_TOP);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_INTEGER:
        token = jj_consume_token(S_INTEGER);
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
    jjtn000.setRowCount(Long.parseLong(token.image));
        break;
      case 79:
        jj_consume_token(79);
         jjtree.closeNodeScope(jjtn000, true);
         jjtc000 = false;
    jjtn000.setRowCountJdbcParameter(true);
        break;
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ColumnReference() throws ParseException {
                        /*@bgen(jjtree) ColumnReference */
  ASTColumnReference jjtn000 = new ASTColumnReference(JJTCOLUMNREFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_4(2147483647)) {
        Function();
      } else if (jj_2_5(2147483647)) {
        Column();
      } else if (jj_2_6(2147483647)) {
        ColumnIndex();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_NULL:
        case K_CASE:
        case K_REPLACE:
        case S_DOUBLE:
        case S_INTEGER:
        case S_IDENTIFIER:
        case S_CHAR_LITERAL:
        case S_QUOTED_IDENTIFIER:
        case 74:
        case 75:
        case 79:
        case 88:
        case 91:
        case 93:
        case 94:
        case 95:
        case 96:
          SimpleExpression();
          break;
        default:
          jj_la1[42] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
    }
  }

  final public void ColumnIndex() throws ParseException {
                    /*@bgen(jjtree) ColumnIndex */
  ASTColumnIndex jjtn000 = new ASTColumnIndex(JJTCOLUMNINDEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token token = null;
    try {
      token = jj_consume_token(S_INTEGER);
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
    jjtn000.jjtSetValue(token.image);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Expression() throws ParseException {
                   /*@bgen(jjtree) Expression */
  ASTExpression jjtn000 = new ASTExpression(JJTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_7(2147483647)) {
        OrExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 74:
          jj_consume_token(74);
          Expression();
          jj_consume_token(76);
          break;
        default:
          jj_la1[43] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void OrExpression() throws ParseException {
    ASTOr jjtn001 = new ASTOr(JJTOR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      AndExpression();
      label_9:
      while (true) {
        if (jj_2_8(2147483647)) {
          ;
        } else {
          break label_9;
        }
        jj_consume_token(K_OR);
        AndExpression();
      }
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void AndExpression() throws ParseException {
    ASTAnd jjtn001 = new ASTAnd(JJTAND);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      if (jj_2_9(2147483647)) {
        Condition();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_NOT:
        case 74:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_NOT:
            jj_consume_token(K_NOT);
            break;
          default:
            jj_la1[44] = jj_gen;
            ;
          }
          jj_consume_token(74);
          OrExpression();
          jj_consume_token(76);
          break;
        default:
          jj_la1[45] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_10:
      while (true) {
        if (jj_2_10(2147483647)) {
          ;
        } else {
          break label_10;
        }
        jj_consume_token(K_AND);
        if (jj_2_11(2147483647)) {
          Condition();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 74:
            jj_consume_token(74);
            OrExpression();
            jj_consume_token(76);
            break;
          default:
            jj_la1[46] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void Condition() throws ParseException {
    if (jj_2_12(2147483647)) {
      SQLCondition();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ALL:
      case K_ANY:
      case K_NOT:
      case K_NULL:
      case K_CASE:
      case K_SOME:
      case K_REPLACE:
      case S_DOUBLE:
      case S_INTEGER:
      case S_IDENTIFIER:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 74:
      case 75:
      case 79:
      case 88:
      case 91:
      case 93:
      case 94:
      case 95:
      case 96:
        RegularCondition();
        break;
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void RegularCondition() throws ParseException {
                         /*@bgen(jjtree) RegularCondition */
  ASTRegularCondition jjtn000 = new ASTRegularCondition(JJTREGULARCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);boolean leftExternalLink = false;
  boolean rightExternalLink = false;
  boolean isNot = false;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
        jj_consume_token(K_NOT);
    isNot = true;
        break;
      default:
        jj_la1[48] = jj_gen;
        ;
      }
      ComparisonItem();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 80:
        jj_consume_token(80);
    leftExternalLink = true;
        break;
      default:
        jj_la1[49] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 81:
        jj_consume_token(81);
    jjtn000.setOper(">");
        break;
      case 82:
        jj_consume_token(82);
    jjtn000.setOper("<");
        break;
      case 83:
        jj_consume_token(83);
    jjtn000.setOper("=");
        break;
      case 84:
        jj_consume_token(84);
    jjtn000.setOper(">=");
        break;
      case 85:
        jj_consume_token(85);
    jjtn000.setOper("<=");
        break;
      case 86:
      case 87:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 86:
          jj_consume_token(86);
          break;
        case 87:
          jj_consume_token(87);
          break;
        default:
          jj_la1[50] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
    jjtn000.setOper("<>");
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ComparisonItem();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 80:
        jj_consume_token(80);
    rightExternalLink = true;
        break;
      default:
        jj_la1[52] = jj_gen;
        ;
      }
     jjtree.closeNodeScope(jjtn000, true);
     jjtc000 = false;
    jjtn000.setLeftExternalLink(leftExternalLink);
    jjtn000.setRightExternalLink(rightExternalLink);
    jjtn000.setNot(isNot);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SQLCondition() throws ParseException {
    if (jj_2_13(2147483647)) {
      InExpression();
    } else if (jj_2_14(2147483647)) {
      Between();
    } else if (jj_2_15(2147483647)) {
      IsNullExpression();
    } else if (jj_2_16(2147483647)) {
      ExistsExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NULL:
      case K_CASE:
      case K_REPLACE:
      case S_DOUBLE:
      case S_INTEGER:
      case S_IDENTIFIER:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 74:
      case 75:
      case 79:
      case 88:
      case 91:
      case 93:
      case 94:
      case 95:
      case 96:
        LikeExpression();
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void InExpression() throws ParseException {
                     /*@bgen(jjtree) InExpression */
  ASTInExpression jjtn000 = new ASTInExpression(JJTINEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SimpleExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
        jj_consume_token(K_NOT);
    jjtn000.setNotin(true);
        break;
      default:
        jj_la1[54] = jj_gen;
        ;
      }
      jj_consume_token(K_IN);
      jj_consume_token(74);
      if (jj_2_17(2147483647)) {
        SubSelect();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_NULL:
        case K_CASE:
        case K_REPLACE:
        case S_DOUBLE:
        case S_INTEGER:
        case S_IDENTIFIER:
        case S_CHAR_LITERAL:
        case S_QUOTED_IDENTIFIER:
        case 74:
        case 75:
        case 79:
        case 88:
        case 91:
        case 93:
        case 94:
        case 95:
        case 96:
          SimpleExpressionList();
          break;
        default:
          jj_la1[55] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(76);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Between() throws ParseException {
                /*@bgen(jjtree) Between */
  ASTBetween jjtn000 = new ASTBetween(JJTBETWEEN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SimpleExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
        jj_consume_token(K_NOT);
    jjtn000.setNot(true);
        break;
      default:
        jj_la1[56] = jj_gen;
        ;
      }
      jj_consume_token(K_BETWEEN);
      SimpleExpression();
      jj_consume_token(K_AND);
      SimpleExpression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void LikeExpression() throws ParseException {
                       /*@bgen(jjtree) LikeExpression */
  ASTLikeExpression jjtn000 = new ASTLikeExpression(JJTLIKEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SimpleExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
        jj_consume_token(K_NOT);
    jjtn000.setNotlike(true);
        break;
      default:
        jj_la1[57] = jj_gen;
        ;
      }
      jj_consume_token(K_LIKE);
      SimpleExpression();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ESCAPE:
        jj_consume_token(K_ESCAPE);
        jj_consume_token(S_CHAR_LITERAL);
        break;
      default:
        jj_la1[58] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void IsNullExpression() throws ParseException {
                         /*@bgen(jjtree) IsNullExpression */
  ASTIsNullExpression jjtn000 = new ASTIsNullExpression(JJTISNULLEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SimpleExpression();
      jj_consume_token(K_IS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
        jj_consume_token(K_NOT);
    jjtn000.setNotnull(true);
        break;
      default:
        jj_la1[59] = jj_gen;
        ;
      }
      jj_consume_token(K_NULL);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ExistsExpression() throws ParseException {
                         /*@bgen(jjtree) ExistsExpression */
  ASTExistsExpression jjtn000 = new ASTExistsExpression(JJTEXISTSEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
        jj_consume_token(K_NOT);
    jjtn000.setNotexists(true);
        break;
      default:
        jj_la1[60] = jj_gen;
        ;
      }
      jj_consume_token(K_EXISTS);
      SimpleExpression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SQLExpressionList() throws ParseException {
                          /*@bgen(jjtree) SQLExpressionList */
  ASTSQLExpressionList jjtn000 = new ASTSQLExpressionList(JJTSQLEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      Expression();
      label_11:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 77:
          ;
          break;
        default:
          jj_la1[61] = jj_gen;
          break label_11;
        }
        jj_consume_token(77);
        Expression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SimpleExpressionList() throws ParseException {
                             /*@bgen(jjtree) SimpleExpressionList */
  ASTSimpleExpressionList jjtn000 = new ASTSimpleExpressionList(JJTSIMPLEEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SimpleExpression();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 77:
          ;
          break;
        default:
          jj_la1[62] = jj_gen;
          break label_12;
        }
        jj_consume_token(77);
        SimpleExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ComparisonItem() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ALL:
      AllComparisonExpression();
      break;
    case K_ANY:
    case K_SOME:
      AnyComparisonExpression();
      break;
    case K_NULL:
    case K_CASE:
    case K_REPLACE:
    case S_DOUBLE:
    case S_INTEGER:
    case S_IDENTIFIER:
    case S_CHAR_LITERAL:
    case S_QUOTED_IDENTIFIER:
    case 74:
    case 75:
    case 79:
    case 88:
    case 91:
    case 93:
    case 94:
    case 95:
    case 96:
      SimpleExpression();
      break;
    default:
      jj_la1[63] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void AllComparisonExpression() throws ParseException {
                                /*@bgen(jjtree) AllComparisonExpression */
  ASTAllComparisonExpression jjtn000 = new ASTAllComparisonExpression(JJTALLCOMPARISONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_ALL);
      jj_consume_token(74);
      SubSelect();
      jj_consume_token(76);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AnyComparisonExpression() throws ParseException {
                                /*@bgen(jjtree) AnyComparisonExpression */
  ASTAnyComparisonExpression jjtn000 = new ASTAnyComparisonExpression(JJTANYCOMPARISONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_ANY:
        jj_consume_token(K_ANY);
        break;
      case K_SOME:
        jj_consume_token(K_SOME);
        break;
      default:
        jj_la1[64] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(74);
      SubSelect();
      jj_consume_token(76);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SimpleExpression() throws ParseException {
    if (jj_2_18(2147483647)) {
      AdditiveExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 74:
        jj_consume_token(74);
        AdditiveExpression();
        jj_consume_token(76);
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void AdditiveExpression() throws ParseException {
    ASTAdd jjtn001 = new ASTAdd(JJTADD);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      MultiplicativeExpression();
    jjtn001.getOpers().add("");
      label_13:
      while (true) {
        if (jj_2_19(2)) {
          ;
        } else {
          break label_13;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 75:
          jj_consume_token(75);
    jjtn001.getOpers().add("+");
          break;
        case 88:
          jj_consume_token(88);
    jjtn001.getOpers().add("-");
          break;
        case 89:
          jj_consume_token(89);
    jjtn001.getOpers().add("||");
          break;
        default:
          jj_la1[66] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        MultiplicativeExpression();
      }
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void MultiplicativeExpression() throws ParseException {
    ASTMult jjtn001 = new ASTMult(JJTMULT);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      if (jj_2_20(2147483647)) {
        PrimaryExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 74:
          jj_consume_token(74);
          AdditiveExpression();
          jj_consume_token(76);
          break;
        default:
          jj_la1[67] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    jjtn001.getOpers().add("");
      label_14:
      while (true) {
        if (jj_2_21(2)) {
          ;
        } else {
          break label_14;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 78:
          jj_consume_token(78);
    jjtn001.getOpers().add("*");
          break;
        case 90:
          jj_consume_token(90);
    jjtn001.getOpers().add("/");
          break;
        default:
          jj_la1[68] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        if (jj_2_22(2147483647)) {
          PrimaryExpression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 74:
            jj_consume_token(74);
            AdditiveExpression();
            jj_consume_token(76);
            break;
          default:
            jj_la1[69] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void PrimaryExpression() throws ParseException {
  Token token = null;
  String tmp = "";
  String tmp2 = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NULL:
     ASTNull jjtn001 = new ASTNull(JJTNULL);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(K_NULL);
      } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
      }
      break;
    case K_CASE:
      CaseWhenExpression();
      break;
    case 79:
      ASTJdbcParameter jjtn002 = new ASTJdbcParameter(JJTJDBCPARAMETER);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      try {
        jj_consume_token(79);
      } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002, true);
      }
      }
      break;
    default:
      jj_la1[82] = jj_gen;
      if (jj_2_23(2147483647)) {
                     ASTInverseExpression jjtn003 = new ASTInverseExpression(JJTINVERSEEXPRESSION);
                     boolean jjtc003 = true;
                     jjtree.openNodeScope(jjtn003);
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 75:
          case 88:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 75:
              jj_consume_token(75);
              break;
            case 88:
              jj_consume_token(88);
    tmp = "-";
              break;
            default:
              jj_la1[70] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[71] = jj_gen;
            ;
          }
          Function();
        } catch (Throwable jjte003) {
                     if (jjtc003) {
                       jjtree.clearNodeScope(jjtn003);
                       jjtc003 = false;
                     } else {
                       jjtree.popNode();
                     }
                     if (jjte003 instanceof RuntimeException) {
                       {if (true) throw (RuntimeException)jjte003;}
                     }
                     if (jjte003 instanceof ParseException) {
                       {if (true) throw (ParseException)jjte003;}
                     }
                     {if (true) throw (Error)jjte003;}
        } finally {
                     if (jjtc003) {
                       jjtree.closeNodeScope(jjtn003,  "-" . equals ( tmp ));
                     }
        }
      } else if (jj_2_24(2147483647)) {
                     ASTDouble jjtn004 = new ASTDouble(JJTDOUBLE);
                     boolean jjtc004 = true;
                     jjtree.openNodeScope(jjtn004);
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 75:
          case 88:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 75:
              jj_consume_token(75);
              break;
            case 88:
              jj_consume_token(88);
    tmp = "-";
              break;
            default:
              jj_la1[72] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[73] = jj_gen;
            ;
          }
          token = jj_consume_token(S_DOUBLE);
                       jjtree.closeNodeScope(jjtn004, true);
                       jjtc004 = false;
    jjtn004.jjtSetValue(tmp+token.image);
        } finally {
                     if (jjtc004) {
                       jjtree.closeNodeScope(jjtn004, true);
                     }
        }
      } else if (jj_2_25(2147483647)) {
                      ASTInteger jjtn005 = new ASTInteger(JJTINTEGER);
                      boolean jjtc005 = true;
                      jjtree.openNodeScope(jjtn005);
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 75:
          case 88:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 75:
              jj_consume_token(75);
              break;
            case 88:
              jj_consume_token(88);
    tmp = "-";
              break;
            default:
              jj_la1[74] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[75] = jj_gen;
            ;
          }
          token = jj_consume_token(S_INTEGER);
                        jjtree.closeNodeScope(jjtn005, true);
                        jjtc005 = false;
    jjtn005.jjtSetValue(tmp+token.image);
        } finally {
                      if (jjtc005) {
                        jjtree.closeNodeScope(jjtn005, true);
                      }
        }
      } else if (jj_2_26(2)) {
                  ASTInverseExpression jjtn006 = new ASTInverseExpression(JJTINVERSEEXPRESSION);
                  boolean jjtc006 = true;
                  jjtree.openNodeScope(jjtn006);
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 75:
          case 88:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 75:
              jj_consume_token(75);
              break;
            case 88:
              jj_consume_token(88);
    tmp = "-";
              break;
            default:
              jj_la1[76] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[77] = jj_gen;
            ;
          }
          Column();
        } catch (Throwable jjte006) {
                  if (jjtc006) {
                    jjtree.clearNodeScope(jjtn006);
                    jjtc006 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte006 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte006;}
                  }
                  if (jjte006 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte006;}
                  }
                  {if (true) throw (Error)jjte006;}
        } finally {
                  if (jjtc006) {
                    jjtree.closeNodeScope(jjtn006,  "-" . equals ( tmp ));
                  }
        }
      } else if (jj_2_27(2)) {
                  ASTInverseExpression jjtn007 = new ASTInverseExpression(JJTINVERSEEXPRESSION);
                  boolean jjtc007 = true;
                  jjtree.openNodeScope(jjtn007);
        try {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 75:
          case 88:
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 75:
              jj_consume_token(75);
              break;
            case 88:
              jj_consume_token(88);
    tmp = "-";
              break;
            default:
              jj_la1[78] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            break;
          default:
            jj_la1[79] = jj_gen;
            ;
          }
          jj_consume_token(74);
          PrimaryExpression();
          jj_consume_token(76);
        } catch (Throwable jjte007) {
                  if (jjtc007) {
                    jjtree.clearNodeScope(jjtn007);
                    jjtc007 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte007 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte007;}
                  }
                  if (jjte007 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte007;}
                  }
                  {if (true) throw (Error)jjte007;}
        } finally {
                  if (jjtc007) {
                    jjtree.closeNodeScope(jjtn007,  "-" . equals ( tmp ));
                  }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_CHAR_LITERAL:
      ASTString jjtn008 = new ASTString(JJTSTRING);
      boolean jjtc008 = true;
      jjtree.openNodeScope(jjtn008);
          try {
            token = jj_consume_token(S_CHAR_LITERAL);
                               jjtree.closeNodeScope(jjtn008, true);
                               jjtc008 = false;
    jjtn008.jjtSetValue(token.image);
          } finally {
      if (jjtc008) {
        jjtree.closeNodeScope(jjtn008, true);
      }
          }
          break;
        case 74:
        case 75:
        case 88:
      ASTInverseExpression jjtn009 = new ASTInverseExpression(JJTINVERSEEXPRESSION);
      boolean jjtc009 = true;
      jjtree.openNodeScope(jjtn009);
          try {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 75:
            case 88:
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case 75:
                jj_consume_token(75);
                break;
              case 88:
                jj_consume_token(88);
    tmp = "-";
                break;
              default:
                jj_la1[80] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
              break;
            default:
              jj_la1[81] = jj_gen;
              ;
            }
            jj_consume_token(74);
            SubSelect();
            jj_consume_token(76);
          } catch (Throwable jjte009) {
      if (jjtc009) {
        jjtree.clearNodeScope(jjtn009);
        jjtc009 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte009 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte009;}
      }
      if (jjte009 instanceof ParseException) {
        {if (true) throw (ParseException)jjte009;}
      }
      {if (true) throw (Error)jjte009;}
          } finally {
      if (jjtc009) {
        jjtree.closeNodeScope(jjtn009,  "-" . equals ( tmp ));
      }
          }
          break;
        case 91:
          jj_consume_token(91);
          token = jj_consume_token(S_CHAR_LITERAL);
          jj_consume_token(92);
          break;
        case 93:
          jj_consume_token(93);
          token = jj_consume_token(S_CHAR_LITERAL);
          jj_consume_token(92);
          break;
        case 94:
          jj_consume_token(94);
          token = jj_consume_token(S_CHAR_LITERAL);
          jj_consume_token(92);
          break;
        default:
          jj_la1[83] = jj_gen;
          if (jj_2_28(2147483647)) {
            UDFFunc();
          } else {
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
    }
  }

  final public void UDFFunc() throws ParseException {
                /*@bgen(jjtree) UDFFunc */
  ASTUDFFunc jjtn000 = new ASTUDFFunc(JJTUDFFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String s = null;
  Map parameters = null;
    try {
      jj_consume_token(95);
      s = RelObjectName();
    jjtn000.setName(s);
      jj_consume_token(74);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:
        parameters = UDFParameterList();
    jjtn000.setParameters(parameters);
        break;
      default:
        jj_la1[84] = jj_gen;
        ;
      }
      jj_consume_token(76);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public Map UDFParameterList() throws ParseException {
  Map result = new HashMap();
  String[]nameAndValue = null;
    nameAndValue = UDFParameter();
    result.put(nameAndValue[0], nameAndValue[1]);
    label_15:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 77:
        ;
        break;
      default:
        jj_la1[85] = jj_gen;
        break label_15;
      }
      jj_consume_token(77);
      nameAndValue = UDFParameter();
    result.put(nameAndValue[0], nameAndValue[1]);
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public String[] UDFParameter() throws ParseException {
  String name, value;
  String[]nameAndValue = new String[2];
    name = RelObjectName();
    jj_consume_token(83);
    value = RelObjectName();
    nameAndValue[0] = name;
    nameAndValue[1] = value;
    {if (true) return nameAndValue;}
    throw new Error("Missing return statement in function");
  }

  final public void CaseWhenExpression() throws ParseException {
                           /*@bgen(jjtree) CaseWhenExpression */
  ASTCaseWhenExpression jjtn000 = new ASTCaseWhenExpression(JJTCASEWHENEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_CASE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_WHEN:
        label_16:
        while (true) {
          WhenThenSearchCondition();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_WHEN:
            ;
            break;
          default:
            jj_la1[86] = jj_gen;
            break label_16;
          }
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ELSE:
          jj_consume_token(K_ELSE);
          PrimaryExpression();
          break;
        default:
          jj_la1[87] = jj_gen;
          ;
        }
        break;
      case K_NULL:
      case K_CASE:
      case K_REPLACE:
      case S_DOUBLE:
      case S_INTEGER:
      case S_IDENTIFIER:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 74:
      case 75:
      case 79:
      case 88:
      case 91:
      case 93:
      case 94:
      case 95:
      case 96:
        PrimaryExpression();
        label_17:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_WHEN:
            ;
            break;
          default:
            jj_la1[88] = jj_gen;
            break label_17;
          }
          WhenThenValue();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ELSE:
          jj_consume_token(K_ELSE);
          PrimaryExpression();
          break;
        default:
          jj_la1[89] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[90] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(K_END);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void WhenThenSearchCondition() throws ParseException {
                                /*@bgen(jjtree) WhenThenSearchCondition */
  ASTWhenThenSearchCondition jjtn000 = new ASTWhenThenSearchCondition(JJTWHENTHENSEARCHCONDITION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_WHEN);
      Expression();
      jj_consume_token(K_THEN);
      PrimaryExpression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void WhenThenValue() throws ParseException {
                      /*@bgen(jjtree) WhenThenValue */
  ASTWhenThenValue jjtn000 = new ASTWhenThenValue(JJTWHENTHENVALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_WHEN);
      PrimaryExpression();
      jj_consume_token(K_THEN);
      PrimaryExpression();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void Function() throws ParseException {
                 /*@bgen(jjtree) Function */
  ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);String funcName = null;
  String tmp = null;
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 96:
        jj_consume_token(96);
        break;
      default:
        jj_la1[91] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
      case S_QUOTED_IDENTIFIER:
        funcName = RelObjectName();
        break;
      case K_REPLACE:
        jj_consume_token(K_REPLACE);
    funcName = "REPLACE";
        break;
      default:
        jj_la1[92] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 73:
        jj_consume_token(73);
        tmp = RelObjectName();
    funcName+="."+tmp;
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 73:
          jj_consume_token(73);
          tmp = RelObjectName();
    funcName+="."+tmp;
          break;
        default:
          jj_la1[93] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[94] = jj_gen;
        ;
      }
      jj_consume_token(74);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NULL:
      case K_CASE:
      case K_REPLACE:
      case S_DOUBLE:
      case S_INTEGER:
      case S_IDENTIFIER:
      case S_CHAR_LITERAL:
      case S_QUOTED_IDENTIFIER:
      case 74:
      case 75:
      case 78:
      case 79:
      case 88:
      case 91:
      case 93:
      case 94:
      case 95:
      case 96:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_NULL:
        case K_CASE:
        case K_REPLACE:
        case S_DOUBLE:
        case S_INTEGER:
        case S_IDENTIFIER:
        case S_CHAR_LITERAL:
        case S_QUOTED_IDENTIFIER:
        case 74:
        case 75:
        case 79:
        case 88:
        case 91:
        case 93:
        case 94:
        case 95:
        case 96:
          SimpleExpressionList();
          break;
        case 78:
          jj_consume_token(78);
    jjtn000.setAllColumns(true);
          break;
        default:
          jj_la1[95] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[96] = jj_gen;
        ;
      }
      jj_consume_token(76);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 92:
        jj_consume_token(92);
        break;
      default:
        jj_la1[97] = jj_gen;
        ;
      }
              jjtree.closeNodeScope(jjtn000, true);
              jjtc000 = false;
    jjtn000.setName(funcName);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SubSelect() throws ParseException {
                  /*@bgen(jjtree) SubSelect */
  ASTSubSelect jjtn000 = new ASTSubSelect(JJTSUBSELECT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SelectBody();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AList() throws ParseException {
              /*@bgen(jjtree) AList */
  ASTAList jjtn000 = new ASTAList(JJTALIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token tk = null;
    try {
      jj_consume_token(74);
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_DOUBLE:
        case S_INTEGER:
        case S_IDENTIFIER:
        case S_CHAR_LITERAL:
          ;
          break;
        default:
          jj_la1[98] = jj_gen;
          break label_18;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_INTEGER:
          tk = jj_consume_token(S_INTEGER);
          break;
        case S_DOUBLE:
          tk = jj_consume_token(S_DOUBLE);
          break;
        case S_CHAR_LITERAL:
          tk = jj_consume_token(S_CHAR_LITERAL);
          break;
        case S_IDENTIFIER:
          tk = jj_consume_token(S_IDENTIFIER);
          break;
        default:
          jj_la1[99] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 77:
          jj_consume_token(77);
          break;
        default:
          jj_la1[100] = jj_gen;
          ;
        }
      }
      jj_consume_token(76);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ColumnsNamesList() throws ParseException {
                         /*@bgen(jjtree) ColumnsNamesList */
  ASTColumnsNamesList jjtn000 = new ASTColumnsNamesList(JJTCOLUMNSNAMESLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token tk = null;
    try {
      jj_consume_token(74);
      tk = jj_consume_token(S_IDENTIFIER);
      label_19:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 77:
          ;
          break;
        default:
          jj_la1[101] = jj_gen;
          break label_19;
        }
        jj_consume_token(77);
        tk = jj_consume_token(S_IDENTIFIER);
      }
      jj_consume_token(76);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) jj_scanpos = xsp;
    if (jj_scan_token(K_EXISTS)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_17() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_68()) return true;
    if (jj_scan_token(K_IS)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_73()) jj_scanpos = xsp;
    if (jj_scan_token(K_NULL)) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_3R_33()) return true;
    return false;
  }

  private boolean jj_3R_108() {
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_143()) jj_scanpos = xsp;
    if (jj_scan_token(K_LIKE)) return true;
    if (jj_3R_68()) return true;
    xsp = jj_scanpos;
    if (jj_3R_144()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_16() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_72()) jj_scanpos = xsp;
    if (jj_scan_token(K_BETWEEN)) return true;
    if (jj_3R_68()) return true;
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3_15() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_14() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_131() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_142() {
    if (jj_scan_token(80)) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_69()) jj_scanpos = xsp;
    if (jj_scan_token(K_IN)) return true;
    if (jj_scan_token(74)) return true;
    xsp = jj_scanpos;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    }
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3R_66() {
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_3R_29()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(K_AND)) return true;
    return false;
  }

  private boolean jj_3R_127() {
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_141() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(86)) {
    jj_scanpos = xsp;
    if (jj_scan_token(87)) return true;
    }
    return false;
  }

  private boolean jj_3R_135() {
    if (jj_scan_token(80)) return true;
    return false;
  }

  private boolean jj_3R_140() {
    if (jj_scan_token(85)) return true;
    return false;
  }

  private boolean jj_3R_106() {
    if (jj_scan_token(K_AND)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_131()) {
    jj_scanpos = xsp;
    if (jj_3R_132()) return true;
    }
    return false;
  }

  private boolean jj_3R_126() {
    if (jj_3R_163()) return true;
    return false;
  }

  private boolean jj_3R_139() {
    if (jj_scan_token(84)) return true;
    return false;
  }

  private boolean jj_3R_138() {
    if (jj_scan_token(83)) return true;
    return false;
  }

  private boolean jj_3R_137() {
    if (jj_scan_token(82)) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_scan_token(K_OR)) return true;
    return false;
  }

  private boolean jj_3R_136() {
    if (jj_scan_token(81)) return true;
    return false;
  }

  private boolean jj_3_12() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_133() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_96() {
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(K_OR)) return true;
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_107() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_133()) jj_scanpos = xsp;
    if (jj_3R_134()) return true;
    xsp = jj_scanpos;
    if (jj_3R_135()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_136()) {
    jj_scanpos = xsp;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) {
    jj_scanpos = xsp;
    if (jj_3R_139()) {
    jj_scanpos = xsp;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) return true;
    }
    }
    }
    }
    }
    if (jj_3R_134()) return true;
    xsp = jj_scanpos;
    if (jj_3R_142()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_125() {
    if (jj_3R_162()) return true;
    return false;
  }

  private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_132() {
    if (jj_scan_token(74)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_105() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(16)) jj_scanpos = xsp;
    if (jj_scan_token(74)) return true;
    if (jj_3R_26()) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_104() {
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_104()) {
    jj_scanpos = xsp;
    if (jj_3R_105()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_106()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_59()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_60()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_195() {
    if (jj_scan_token(74)) return true;
    if (jj_3R_183()) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_194() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_183() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) return true;
    }
    return false;
  }

  private boolean jj_3_6() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_124() {
    if (jj_3R_161()) return true;
    return false;
  }

  private boolean jj_3R_165() {
    if (jj_scan_token(77)) return true;
    if (jj_3R_164()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(S_INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_196() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_184() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_199() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_185() {
    if (jj_scan_token(77)) return true;
    if (jj_3R_184()) return true;
    return false;
  }

  private boolean jj_3R_198() {
    if (jj_3R_25()) return true;
    return false;
  }

  private boolean jj_3R_197() {
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_186() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_3R_200()) return true;
    }
    return false;
  }

  private boolean jj_3R_174() {
    if (jj_scan_token(S_INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_202() {
    if (jj_scan_token(K_ON)) return true;
    if (jj_3R_183()) return true;
    return false;
  }

  private boolean jj_3R_175() {
    if (jj_scan_token(79)) return true;
    return false;
  }

  private boolean jj_3R_128() {
    if (jj_scan_token(K_ALL)) return true;
    return false;
  }

  private boolean jj_3R_155() {
    if (jj_scan_token(K_TOP)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) return true;
    }
    return false;
  }

  private boolean jj_3R_205() {
    if (jj_scan_token(77)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_200() {
    if (jj_scan_token(K_DESC)) return true;
    return false;
  }

  private boolean jj_3R_130() {
    if (jj_scan_token(K_ALL)) return true;
    return false;
  }

  private boolean jj_3R_95() {
    if (jj_scan_token(K_UNION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_128()) jj_scanpos = xsp;
    if (jj_scan_token(74)) return true;
    if (jj_3R_93()) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_164() {
    if (jj_3R_184()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_186()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_129() {
    if (jj_scan_token(K_ORDER)) return true;
    if (jj_scan_token(K_BY)) return true;
    if (jj_3R_164()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_165()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_163() {
    if (jj_scan_token(K_HAVING)) return true;
    if (jj_3R_183()) return true;
    return false;
  }

  private boolean jj_3R_160() {
    if (jj_scan_token(77)) return true;
    if (jj_3R_158()) return true;
    if (jj_3R_159()) return true;
    return false;
  }

  private boolean jj_3R_98() {
    if (jj_scan_token(K_UNION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_130()) jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_121() {
    if (jj_3R_155()) return true;
    return false;
  }

  private boolean jj_3R_162() {
    if (jj_scan_token(K_GROUP)) return true;
    if (jj_scan_token(K_BY)) return true;
    if (jj_3R_184()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_185()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_161() {
    if (jj_scan_token(K_WHERE)) return true;
    if (jj_3R_183()) return true;
    return false;
  }

  private boolean jj_3R_203() {
    if (jj_scan_token(K_USING)) return true;
    if (jj_scan_token(74)) return true;
    if (jj_3R_24()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_205()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_181() {
    if (jj_3R_192()) return true;
    return false;
  }

  private boolean jj_3R_204() {
    if (jj_scan_token(K_LEFT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(44)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_201() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_204()) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    return false;
  }

  private boolean jj_3R_193() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_201()) jj_scanpos = xsp;
    if (jj_scan_token(K_JOIN)) return true;
    if (jj_3R_158()) return true;
    xsp = jj_scanpos;
    if (jj_3R_202()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) return true;
    }
    return false;
  }

  private boolean jj_3R_182() {
    if (jj_3R_193()) return true;
    return false;
  }

  private boolean jj_3R_159() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_182()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_180() {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3R_179() {
    if (jj_scan_token(74)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_158() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_179()) {
    jj_scanpos = xsp;
    if (jj_3R_180()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_181()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_191() {
    if (jj_3R_192()) return true;
    return false;
  }

  private boolean jj_3R_123() {
    if (jj_scan_token(K_FROM)) return true;
    if (jj_3R_158()) return true;
    if (jj_3R_159()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_160()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_94() {
    if (jj_scan_token(K_ALL)) return true;
    return false;
  }

  private boolean jj_3R_192() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(5)) jj_scanpos = xsp;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_97() {
    if (jj_scan_token(K_ALL)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_52()) return true;
    if (jj_scan_token(73)) return true;
    if (jj_scan_token(78)) return true;
    return false;
  }

  private boolean jj_3R_173() {
    if (jj_scan_token(K_ON)) return true;
    if (jj_scan_token(74)) return true;
    if (jj_3R_122()) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_157() {
    if (jj_scan_token(77)) return true;
    if (jj_3R_156()) return true;
    return false;
  }

  private boolean jj_3R_178() {
    if (jj_3R_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_191()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_177() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(74)) return true;
    if (jj_scan_token(75)) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_120() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_3R_154()) return true;
    }
    return false;
  }

  private boolean jj_3R_176() {
    if (jj_scan_token(78)) return true;
    return false;
  }

  private boolean jj_3R_156() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) {
    jj_scanpos = xsp;
    if (jj_3R_178()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_154() {
    if (jj_scan_token(K_DISTINCT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_173()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_122() {
    if (jj_3R_156()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_157()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_93() {
    if (jj_scan_token(K_SELECT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_121()) jj_scanpos = xsp;
    if (jj_3R_122()) return true;
    if (jj_3R_123()) return true;
    xsp = jj_scanpos;
    if (jj_3R_124()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_125()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_126()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_127()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_3R_93()) return true;
    if (jj_scan_token(K_UNION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_97()) jj_scanpos = xsp;
    if (jj_3R_93()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_98()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_172() {
    if (jj_scan_token(K_ELSE)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(74)) return true;
    if (jj_3R_93()) return true;
    if (jj_scan_token(76)) return true;
    if (jj_scan_token(K_UNION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_94()) jj_scanpos = xsp;
    if (jj_scan_token(74)) return true;
    if (jj_3R_93()) return true;
    if (jj_scan_token(76)) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_95()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_96()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) return true;
    }
    return false;
  }

  private boolean jj_3R_170() {
    if (jj_scan_token(K_ELSE)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_113() {
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_112() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3R_75() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_112()) {
    jj_scanpos = xsp;
    if (jj_3R_113()) return true;
    }
    return false;
  }

  private boolean jj_3R_102() {
    if (jj_scan_token(78)) return true;
    return false;
  }

  private boolean jj_3R_103() {
    if (jj_scan_token(73)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_99() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_101() {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3R_171() {
    if (jj_3R_190()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_101()) {
    jj_scanpos = xsp;
    if (jj_3R_102()) return true;
    }
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_100() {
    if (jj_scan_token(73)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_55() {
    if (jj_scan_token(73)) return true;
    if (jj_3R_20()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_100()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(73)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_99()) return true;
    }
    return false;
  }

  private boolean jj_3R_54() {
    if (jj_scan_token(K_REPLACE)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(96)) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_55()) jj_scanpos = xsp;
    if (jj_scan_token(74)) return true;
    xsp = jj_scanpos;
    if (jj_3R_56()) jj_scanpos = xsp;
    if (jj_scan_token(76)) return true;
    xsp = jj_scanpos;
    if (jj_scan_token(92)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_169() {
    if (jj_3R_189()) return true;
    return false;
  }

  private boolean jj_3R_146() {
    Token xsp;
    if (jj_3R_169()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_169()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_170()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_190() {
    if (jj_scan_token(K_WHEN)) return true;
    if (jj_3R_39()) return true;
    if (jj_scan_token(K_THEN)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(68)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) return true;
    }
    return false;
  }

  private boolean jj_3R_189() {
    if (jj_scan_token(K_WHEN)) return true;
    if (jj_3R_183()) return true;
    if (jj_scan_token(K_THEN)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_147() {
    if (jj_3R_39()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_171()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_172()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_114() {
    if (jj_scan_token(K_CASE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) return true;
    }
    if (jj_scan_token(K_END)) return true;
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(73)) return true;
    if (jj_3R_20()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_103()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_152() {
    if (jj_3R_20()) return true;
    if (jj_scan_token(83)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_153() {
    if (jj_scan_token(77)) return true;
    if (jj_3R_152()) return true;
    return false;
  }

  private boolean jj_3R_119() {
    if (jj_3R_152()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_153()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_20()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_58()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_92() {
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3_28() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(95)) return true;
    if (jj_3R_20()) return true;
    if (jj_scan_token(74)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_92()) jj_scanpos = xsp;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_89() {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_88() {
    if (jj_scan_token(94)) return true;
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    if (jj_scan_token(92)) return true;
    return false;
  }

  private boolean jj_3R_87() {
    if (jj_scan_token(93)) return true;
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    if (jj_scan_token(92)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_3R_91()) return true;
    }
    return false;
  }

  private boolean jj_3R_86() {
    if (jj_scan_token(91)) return true;
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    if (jj_scan_token(92)) return true;
    return false;
  }

  private boolean jj_3R_118() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_3R_151()) return true;
    }
    return false;
  }

  private boolean jj_3R_151() {
    if (jj_scan_token(88)) return true;
    return false;
  }

  private boolean jj_3R_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_118()) jj_scanpos = xsp;
    if (jj_scan_token(74)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_3R_90()) return true;
    }
    return false;
  }

  private boolean jj_3R_84() {
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_117() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_3R_150()) return true;
    }
    return false;
  }

  private boolean jj_3R_91() {
    if (jj_scan_token(88)) return true;
    return false;
  }

  private boolean jj_3_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_48()) jj_scanpos = xsp;
    if (jj_scan_token(74)) return true;
    if (jj_3R_39()) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) return true;
    }
    return false;
  }

  private boolean jj_3_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_46()) jj_scanpos = xsp;
    if (jj_scan_token(S_INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_90() {
    if (jj_scan_token(88)) return true;
    return false;
  }

  private boolean jj_3_26() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_47()) jj_scanpos = xsp;
    if (jj_3R_24()) return true;
    return false;
  }

  private boolean jj_3R_116() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_3R_149()) return true;
    }
    return false;
  }

  private boolean jj_3R_115() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_3R_148()) return true;
    }
    return false;
  }

  private boolean jj_3R_150() {
    if (jj_scan_token(88)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) return true;
    }
    return false;
  }

  private boolean jj_3_24() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) jj_scanpos = xsp;
    if (jj_scan_token(S_DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_117()) jj_scanpos = xsp;
    if (jj_scan_token(S_INTEGER)) return true;
    return false;
  }

  private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(75)) {
    jj_scanpos = xsp;
    if (jj_scan_token(88)) return true;
    }
    return false;
  }

  private boolean jj_3_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_44()) jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_149() {
    if (jj_scan_token(88)) return true;
    return false;
  }

  private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) jj_scanpos = xsp;
    if (jj_scan_token(S_DOUBLE)) return true;
    return false;
  }

  private boolean jj_3R_148() {
    if (jj_scan_token(88)) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(79)) return true;
    return false;
  }

  private boolean jj_3R_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_115()) jj_scanpos = xsp;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_22() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_scan_token(K_NULL)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) {
    jj_scanpos = xsp;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) {
    jj_scanpos = xsp;
    if (jj_3R_82()) {
    jj_scanpos = xsp;
    if (jj_3R_83()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3R_84()) {
    jj_scanpos = xsp;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(78)) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(74)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_20() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(90)) return true;
    return false;
  }

  private boolean jj_3_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) {
    jj_scanpos = xsp;
    if (jj_3R_41()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_42()) {
    jj_scanpos = xsp;
    if (jj_3R_43()) return true;
    }
    return false;
  }

  private boolean jj_3R_77() {
    if (jj_scan_token(74)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(75)) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) {
    jj_scanpos = xsp;
    if (jj_3R_77()) return true;
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_21()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(89)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(88)) return true;
    return false;
  }

  private boolean jj_3_18() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    }
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_145() {
    if (jj_scan_token(77)) return true;
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_38()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_19()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_110() {
    if (jj_scan_token(74)) return true;
    if (jj_3R_34()) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_109() {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_68() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_109()) {
    jj_scanpos = xsp;
    if (jj_3R_110()) return true;
    }
    return false;
  }

  private boolean jj_3R_188() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(34)) return true;
    }
    if (jj_scan_token(74)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_144() {
    if (jj_scan_token(K_ESCAPE)) return true;
    if (jj_scan_token(S_CHAR_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_187() {
    if (jj_scan_token(K_ALL)) return true;
    if (jj_scan_token(74)) return true;
    if (jj_3R_33()) return true;
    if (jj_scan_token(76)) return true;
    return false;
  }

  private boolean jj_3R_168() {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_167() {
    if (jj_3R_188()) return true;
    return false;
  }

  private boolean jj_3R_166() {
    if (jj_3R_187()) return true;
    return false;
  }

  private boolean jj_3R_134() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_111() {
    if (jj_3R_68()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_145()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_143() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public SelectParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[102];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x20,0x0,0x0,0x1000,0x0,0x1000,0x0,0x1000,0x0,0x1000,0x0,0x800,0x1000,0x1000,0x80000,0x0,0x0,0x0,0x0,0x0,0x20,0x0,0x40800000,0x20,0x0,0x0,0x20,0xc000000,0x0,0x8000000,0x8000000,0x0,0x800,0x0,0x0,0x240000,0x240000,0x0,0x40800000,0x0,0x10000,0x10000,0x0,0x40815000,0x10000,0x0,0x0,0x0,0x0,0x40800000,0x10000,0x40800000,0x10000,0x10000,0x0,0x10000,0x10000,0x0,0x0,0x40805000,0x4000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40800000,0x0,0x0,0x0,0x80000000,0x0,0x80000000,0x0,0xc0800000,0x0,0x0,0x0,0x0,0x40800000,0x40800000,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x10000,0x0,0x40,0x0,0x2000,0x0,0x40,0x0,0x10000,0x0,0x20000000,0x20000000,0x0,0x10,0x80,0x80000,0x2000,0x0,0x0,0x0,0x84000000,0x0,0x0,0x0,0x0,0x400,0x1000,0x400,0x400,0x0,0x20,0x0,0x0,0x0,0x0,0x0,0x84000000,0x0,0x0,0x0,0x0,0x84000004,0x0,0x0,0x0,0x0,0x0,0x84000000,0x0,0x84000000,0x0,0x0,0x800000,0x0,0x0,0x0,0x0,0x84000004,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x2,0x84000000,0x0,0x4000000,0x0,0x0,0x84000000,0x84000000,0x0,0x80000000,0x80000000,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x200,0x200,0x400,0x110,0x110,0x110,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x110,0x4000,0xe9008d91,0x0,0x2000,0x510,0x110,0x0,0x0,0x0,0x0,0x2000,0x0,0x2000,0x2000,0x0,0x0,0x8001,0xe9008d91,0x400,0x0,0x400,0x400,0xe9008d91,0x0,0x10000,0xc00000,0xfe0000,0x10000,0xe9008d91,0x0,0xe9008d91,0x0,0x0,0x0,0x0,0x0,0x2000,0x2000,0xe9008d91,0x0,0x400,0x3000800,0x400,0x4004000,0x400,0x1000800,0x1000800,0x1000800,0x1000800,0x1000800,0x1000800,0x1000800,0x1000800,0x1000800,0x1000800,0x1000800,0x1000800,0x8000,0x69000c80,0x110,0x2000,0x0,0x0,0x0,0x0,0xe9008d91,0x0,0x110,0x200,0x200,0xe900cd91,0xe900cd91,0x10000000,0x91,0x91,0x2000,0x2000,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x1,0x1,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[28];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SelectParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SelectParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SelectParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 102; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 102; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SelectParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SelectParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 102; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 102; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SelectParser(SelectParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 102; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SelectParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 102; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[97];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 102; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 97; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 28; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
